<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
		<meta charset="UTF-8"/>
		<title>VWF Dialogues Patch - Manual</title>
		<link rel="stylesheet" type="text/css" href="lib/bootstrap-4.0.0.min.css"/>
		<link rel="stylesheet" type="text/css" href="style.css"/>
		<script type="application/javascript" defer="true" src="lib/jquery-3.2.1.slim.min.js"></script>
		<script type="application/javascript" defer="true" src="lib/popper-1.12.9.min.js"></script>
		<script type="application/javascript" defer="true" src="lib/bootstrap-4.0.0.min.js"></script>
	</head>

	<!-- Body Begin -->

	<body id="top" class="position-relative" data-spy="scroll" data-target="#navbar" data-offset="0">
		<nav class="navbar navbar-expand-xl fixed-top navbar-light bg-light">
			<div class="container">
				<a class="navbar-brand mb-0 h1" href="#top">VWF Dialogues Patch</a>
				<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbar" aria-controls="navbar" aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<nav class="collapse navbar-collapse" id="navbar">
					<ul class="navbar-nav ml-auto">
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#intro">Introduction</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#start">Getting Started</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#basic-functionality">Basic Functionality</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#advanced-functionality">Advanced Functionality</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#problem-solving">Problem Solving</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#bugs">Known Bugs</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#plans">Planned Features</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#bug-reports">Bug Reports</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#history">History</a>
						</li>
					</ul>
				</nav>
			</div>
		</nav>

		<!-- Seperator Comment -->

		<section class="jumbotron">
			<div class="container">
				<h1 class="text-center mt-1 mb-2">VWF Dialogues Patch<br/><small>© 2010-2022 RPG Hacker</small></h1>

				<div class="row my-2 py-1 text-center ir-crisp">
					<div class="py-2 col col-xl-3 offset-xl-1"><img src="screenshots/screen-5.png" alt="Screenshot"/></div>
					<div class="py-2 col col-xl-4"><img src="screenshots/screen-4.png" alt="Screenshot"/></div>
					<div class="py-2 col col-xl-3"><img src="screenshots/screen-9.png" alt="Screenshot"/></div>
				</div>

				<div class="text-center mb-3">
					<div class="btn-group">
						<button class="btn btn-primary" data-toggle="collapse" data-target="#video1" aria-expanded="false" aria-controls="video1">
							Video 1
						</button>
						<button class="btn btn-primary" data-toggle="collapse" data-target="#video2" aria-expanded="false" aria-controls="video2">
							Video 2
						</button>
					</div>
					<div class="row">
						<div class="col-12 col-md-6 mt-3">
							<div id="video1" class="collapse nobefore">
								<iframe class="video" src="https://www.youtube.com/embed/wEWhCg-UCm0?rel=0" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
							</div>
						</div>
						<div class="col-12 col-md-6 mt-3">
							<div id="video2" class="collapse nobefore">
								<iframe class="video" src="https://www.youtube.com/embed/M2glDLSeITo?rel=0" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
							</div>
						</div>
					</div>
				</div>

				<h3 id="index">Table of Contents</h3>
				<ol>
					<li><a href="#intro">Introduction</a></li>
					<li><a href="#start">Getting Started</a></li>
					<li><a href="#basic-functionality">Basic Functionality</a><ul>
						<details><summary><a href="#resources">Resources (Graphics, Palettes, Fonts...)</a></summary>
							<ul>
								<li><a href="#resources-text-box-bgs">Text Box Backgrounds</a></li>
								<li><a href="#resources-text-box-frames">Text Box Frames</a></li>
								<li><a href="#resources-fonts">Fonts</a></li>
								<li><a href="#resources-message-files">Message Files</a></li>
							</ul></details>
						<li><a href="#message-format">Message Format</a></li>
						<details>
							<summary><a href="#header-settings">Header Settings</a></summary><ul>
						</ul></details>
						<details>
							<summary><a href="#text-commands">Text Commands</a></summary><ul>
							<li><a href="#text-command-ff"><code>$FF</code> - End Dialogue</a></li>
							<li><a href="#text-command-fe"><code>$FE</code> - Space</a></li>
							<li><a href="#text-command-fd"><code>$FD</code> - Force Line Break</a></li>
							<li><a href="#text-command-fc"><code>$FC</code> - Set Message Number</a></li>
							<li><a href="#text-command-fb"><code>$FB</code> - Modify Text Pointer</a></li>
							<li><a href="#text-command-fa"><code>$FA</code> - Wait for A Button</a></li>
							<li><a href="#text-command-f9"><code>$F9</code> - Wait for <code>$XX</code> frames</a></li>
							<li><a href="#text-command-f8"><code>$F8</code> - Change Text Speed</a></li>
							<li><a href="#text-command-f7"><code>$F7</code> - Display Decimal Number</a></li>
							<li><a href="#text-command-f6"><code>$F6</code> - Display Hexadecimal Number</a></li>
							<li><a href="#text-command-f5"><code>$F5</code> - Display RAM Character</a></li>
							<li><a href="#text-command-f4"><code>$F4</code> - Display Character</a></li>
							<li><a href="#text-command-f3"><code>$F3</code> - Change Text Palette</a></li>
							<li><a href="#text-command-f2"><code>$F2</code> - Change Font</a></li>
							<li><a href="#text-command-f1"><code>$F1</code> - Execute Code</a></li>
							<li><a href="#text-command-f0"><code>$F0</code> - Display Options</a></li>
							<li><a href="#text-command-ef"><code>$EF</code> - Setup Teleport</a></li>
							<li><a href="#text-command-ee"><code>$EE</code> - Edit Color</a></li>
							<li><a href="#text-command-ed"><code>$ED</code> - Clear Text Box</a></li>
							<li><a href="#text-command-ec"><code>$EC</code> - Play BGM</a></li>
							<li><a href="#text-command-eb"><code>$EB</code> - Freeze Textbox</a></li>
							<li><a href="#text-command-e9-ea"><code>$EA</code> - Unused</a></li>
							<li><a href="#text-command-e9-ea"><code>$E9</code> - Unused</a></li>
							<li><a href="#text-command-e8"><code>$E8</code> - Use Text Macro</a></li>
							<li><a href="#text-command-e7"><code>$E7</code> - Return from Text Macro</a></li>
						</ul></details>
						<li><a href="#text-macros">Text Macros</a></li>
					</ul></li>
					<li><a href="#advanced-functionality">Advanced Functionality</a><ul>
						<li><a href="#display-messages">Display Messages From Custom Code</a></li>
						<details>
							<summary><a href="#shared-routines">Shared Routines</a></summary><ul>
							<li><a href="#vwfcode-displayamessage">DisplayAMessage</a></li>
							<li><a href="#vwfcode-changevwftextptr">ChangeVWFTextPtr</a></li>
							<li><a href="#vwfcode-changemessageasmptr">ChangeMessageASMPtr</a></li>
							<li><a href="#vwfcode-changemessageskipptr">ChangeMessageSkipPtr</a></li>
							<li><a href="#vwfcode-checkifmessagewasskipped">CheckIfMessageWasSkipped</a></li>
							<li><a href="#vwfcode-buffervwftext">BufferVWFText</a></li>
							<li><a href="#vwfcode-togglemessageasmptr">ToggleMessageASMPtr</a></li>
							<li><a href="#vwfcode-closemessageandgotooverworld">CloseMessageAndGoToOverworld</a></li>
						</ul></details>
					</ul></li>
					<li><a href="#problem-solving">Problem Solving</a></li>
					<li><a href="#bugs">Known Bugs</a></li>
					<li><a href="#plans">Planned Features</a></li>
					<li><a href="#bug-reports">Bug Reports</a></li>
					<li><a href="#history">History</a></li>
				</ol>
			</div>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="intro" class="text-center">1. Introduction</h2>
			<p>
				Welcome to my VWF Dialogues Patch! Since you got here by yourself, you most likely
				already know what this patch does, but let me give you a general overview anyways.
			</p>

			<p>
				The aim of this patch is to give a useful alternative to SMW’s native text boxes.
				Unlike Romi's VWF Cutscene Tool (which is great, but has very specific use cases only), this patch was designed around easy
				event creation, easy customization and compatibility with all kinds of languages. The cost
				of this is that its useage is slightly more advanced and requires more knowledge. However, as long as you read this manual carefully and are somewhat familiar with
				custom sprites/custom blocks and Asar patches, you should be fine.
			</p>

			<p>
				I’ve included a single custom block that utilizes this patch. Originally, I wanted to include more blocks and also
				a few custom sprites, but I figured that any custom block or custom sprite hosted on SMW Central that
				displays a native SMW message box should already be compatible with the patch as long as you enable the SMW message box hijack (see
				<a href="#start">section 2</a>). The one block I did include gives a general idea on how to address this patch within your own code.
				It primarily serves as a sample for people who want to write custom code that interfaces with the patch.
			</p>
				
			<p>
				In addition to this, I’ve included a few alternative fonts in case you don’t like the default one. Though keep in mind that the
				default font features the largest (non-Japanese) character set. If you’re making a hack in any language that isn't English
				and features any special characters that are not yet in the default font, you will have to draw and add the missing glyphs yourself.
			</p>

			<p>
				Be aware that by default, this patch applies some modifications to your ROM that seem to be unrelated to the patch itself at first
				and might have unintended side effects. For example: It automatically expands
				the ROM's SRAM size to 128 KB since it requires roughly around 20 KB of working RAM that normally aren't available in SMW.
				For all of those cases, there's usually config options that can be used to disable the respective modifications if desired.
			</p>

			<p>
				Anyways, let’s get started with the first steps of setting up the patch.
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="start" class="text-center">2. Getting Started</h2>
			<p>
				In order to make use of this patch, you'll need to have downloaded <code>Asar v1.90</code> or newer. Older versions of Asar
				won't work, as the patch was designed specifically around newer Asar features for an improved user experience.
				As for the patch itself, the very first thing you’ll want to do is to take the entire <code>vwf_dialogues</code> folder
				and copy it over to your hack’s local <code>patches</code> directory so that you can make modifications to it as needed. If you only
				want to see the patch in action, without configuring anything or adding custom text, you may go ahead and patch <code>vwf_dialogues.asm</code>
				to your ROM right now. Otherwise, keep reading.
			</p>

			<p>
				The patch is structured in a way where all data that is meant to be editable by end users is stored inside the <code>data</code> subdirectory.
				The most important file here is called <code>vwfconfig.cfg</code> and it contains all the major settings for the patch. Open it up in a text editor
				of your choice to edit them. Pay special attention to all the comments in this file, as they explain what most of the options do. This manual
				will only explain some of the more important ones.
			</p>
			
			<p>
				The first options you will find are <code>!vwf_var_ram</code>, <code>!vwf_backup_ram</code> and <code>!vwf_gfx_ram</code> as well as
				<code>!vwf_var_ram_sa1</code>, <code>!vwf_backup_ram_sa1</code>, <code>!vwf_gfx_ram_sa1</code> and <code>!vwf_palette_backup_ram_sa1</code>
				respectively. The first section of variables is used only in non-SA-1 ROMs, with the second one only being used in SA-1 ROMs.
				These defines configure which areas of RAM VWF Dialogues will use as their working memory. As an average user, you most likely won't ever
				have to edit any of these. The default settings should work out of the box. Advanced users, who might need more control over their RAM,
				can make use of them, going by the comments on each define as a rough guide on what they need and how they're being used.
			</p>
			
			<p>
				The only thing worth noting is that without further modifications, a non-SA-1 SMW ROM doesn't provide the amount of free RAM VWF Dialogues need.
				For this reason, the patch uses SRAM as working memory by default. All of the non-SA-1 address defines mentioned above have their default values
				pointing to areas in SRAM. The patch automatically applies a SRAM expansion patch to make sure enough SRAM is available. This behavior is controlled
				via the <code>!vwf_patch_sram_expansion</code> setting. Advanced users can set it to <code>false</code> to disable SRAM expansion, but
				will have to use additional patches that provide alternative areas of free RAM. SA-1 ROMs are unaffected by all this, as the SA-1 chip contains
				its own large area of RAM, which in the case of SMW is more than enough for this patch to work with.
			</p>
			
			<p>
				Now for (occasionally not so) quick explanations on some of the more important settings in the <code>Patch Settings</code> section:
				<ul>
					<li><code>!vwf_bit_mode</code>: Setting it to <code>VWF_BitMode.8Bit</code> will make the patch operate in 8-bit mode, whereas
						setting it to <code>VWF_BitMode.16Bit</code> will make it operate in 16-bit mode. In 16-bit mode, every text character and
						ever text box command use two bytes instead of one, meaning higher free space consumption in the ROM. In this mode, any
						commands that affect the active font are ignored. Instead, the high byte of each character controls which font to use
						for that particular character. This mode was originally intended for complex languages like Japanese, but in practice, I don't
						know if it was ever actively used, and its increased free space requirements might not make it worth using. Therefore, you
						should consider this option deprecated. It will only remain in the patch until someone can come up with a better solution
						for these languages.</li>
					<li><code>!vwf_hijack_message_box</code>: When set to <code>true</code>, the patch hijacks SMW's original message boxes so
						that activating one will display a VWF Dialogue instead. Here's a few quick examples of how SMW message IDs map onto
						VWF message IDs (more on message IDs later):
						<table>
							<tr>
								<th>SMW Message ID</th>
								<th>VWF Dialogues Message ID</th>
							</tr>
							<tr>
								<td>000-1</td>
								<td>0000</td>
							</tr>
							<tr>
								<td>000-2</td>
								<td>0001</td>
							</tr>
							<tr>
								<td>001-1</td>
								<td>0002</td>
							</tr>
							<tr>
								<td>001-2</td>
								<td>0003</td>
							</tr>
							<tr>
								<td>...</td>
								<td>...</td>
							</tr>
							<tr>
								<td>007-1</td>
								<td>000E</td>
							</tr>
							<tr>
								<td>007-2</td>
								<td>000F</td>
							</tr>
							<tr>
								<td>...</td>
								<td>...</td>
							</tr>
							<tr>
								<td>00F-1</td>
								<td>001E</td>
							</tr>
							<tr>
								<td>00F-2</td>
								<td>001F</td>
							</tr>
							<tr>
								<td>...</td>
								<td>...</td>
							</tr>
							<tr>
								<td>13B-1</td>
								<td>00BE</td>
							</tr>
							<tr>
								<td>13B-2</td>
								<td>00BF</td>
							</tr>
						</table>
						When set to <code>false</code>, SMW message boxes and VWF Dialogues can coexist within the same ROM. In this case, you need VWF Dialogue compatible
						custom sprites or custom blocks in order to use them. One example of those would be wye's NPC sprites.
						</li>
					<li><code>!vwf_enable_short_aliases</code>: When set to <code>true</code>, the patch defines a number of short aliases for most text commands. For example, you
						may use <code>!str("Hello!")</code> or <code>!text("Hello!")</code> instead of <code>%vwf_text("Hello!")</code>, <code>!font($01)</code> instead of <code>%vwf_font($01)</code> or
						<code>!press_a</code> instead of <code>%vwf_wait_for_a()</code>. These short aliases are intended for convenience and to make VWF Dialogues easier to read in code.
						It's very unlikely that you'll ever need to set this to <code>false</code>. The only conceivable scenario would be when you include <code>vwf_dialogues.asm</code> from within another patch via an <code>incsrc</code>. In that case, disabling this feature might make sense to reduce the likelihood of naming conflicts occuring. Further details on available short aliases
						will be provided along with the documentation of each text command.</li>
				</ul>
			</p>
			
			<p>
				Settings in the <code>Default Settings</code> sections define the default values/behaviors of various patch functions.
				I won't explain them in detail here, because most are either self-explanatory or will become apparent once the respective
				functions they relate to are explained.
			</p>
			
			<p>
				The <code>Data Includes</code> section becomes relevant once you want to add new assets to the patch. That is: New fonts, new message files, new text box frames etc.
				New fonts and messages files are added within the <code>vwf_define_data()</code> macro, whereas the <code>vwf_define_frames()</code> macro lets you specify the properties
				of your text box frames (currently just the palettes). Once again, these settings should become more apparent when their respective functionality is explained.
			</p>

			<p>
				This covers all of the patch's basic setup. More advanced functionality will be explained in detail later on.
				Once you're done configuring <code>vwfconfig.cfg</code>, you may go ahead and use Asar to patch <code>vwf_dialogues.asm</code>
				to your ROM. If everything was set up correctly, Asar's output should look roughly like this:
				<img class="d-block m-1 my-2" src="screenshots/console-1.png" alt="Screenshot" width="1115" height="875" />
				If that’s what you get, then the patch was applied successfully. Most of these outputs are just for debugging purposes.
				You can safely ignore them, unless you're modifying the patch itself or coding some advanced feature that makes use of it.
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="basic-functionality" class="text-center">3. Basic Functionality</h2>
			<p>
				In this section I'll explain all the functionality that is intended for average users of this patch. This includes setting up resources and writing actual message boxes.
			</p>

			<h3 id="resources" class="text-center">Resources (Graphics, Palettes, Fonts...)</h3>
			<p>
				VWF Dialogues are designed to be very customizable. This not only includes the dialogue text itself, but also the design of the text box containing it. It's possible to customize all text box frames and backgrounds, as well as all fonts, to your liking, or add new ones entirely. The patch can even switch between them at run-time (though for text box frames and backgrounds, this is only technically supported - no feature is currently provided that makes use of this possibility, so if you want it in your hack, you currently need to write custom code for it). In order to make the most out of these features, you'll have to understand the different types of resources the patch uses, all contained within the <cod>data</cod> folder. Here's a short summary:
			</p>
			
			<p>
				<ul>
					<li>Text boxes
						<ul>
							<li>Frame graphics</li>
							<li>Background graphics</li>
							<li>Frame color palettes</li>
							<li>Background color</li>
						</ul>
					</li>
					<li>Fonts
						<ul>
							<li>Glyph graphics</li>
							<li>Character width tables</li>
							<li>Character to glyph mapping tables</li>
						</ul>
					</li>
				</ul>
			</p>
			
			<p>
				Editing any of these graphics requires a tile editor that supports the <code>2BPP GB</code> graphics format. In theory, any such
				tile editor will do, but if you plan to edit (or create) fonts, I highly recommend using a recent version of <code>YY-CHR</code>.
				You'll want to be using at least <code>v0.99</code>, as older versions lack some features that make editing fonts practicable. For the
				purpose of this manual, I will assume you're using YY-CHR and will reference it where appropriate.
			</p>

			<h4 id="resources-text-box-bgs" class="text-center">Text Box Backgrounds</h4>
			<p>
				For starters, let's look at background graphics, which are by far the simplest graphics format. Open <code>data/gfx/vwfbgpatterns.bin</code> in 
				YY-CHR and set the graphics format to <code>2BPP GB</code>. After tweaking palettes a little, you should see something similiar to this:
				<img class="d-block m-1 my-2" src="screenshots/yychr-1.png" alt="Screenshot" width="634" height="481"/>
				Here's what you need to know about background graphics:
				<ul>
					<li>Each 8×8 tile represents one BG pattern. The tile is simply repeated horizontally and vertically to fill up the entire background of a text box.</li>
					<li>The file size of <code>vwfbgpatterns.bin</code> must be divisible by 16. That's exactly the size of one 8x8 tiles in 2BPP GB graphics format in YY-CHR.</li>
					<li>The default background color is defined via <code>!vwf_default_text_box_bg_color</code> in <code>data/vwfconfig.cfg</code>. Currently, to switch to a different BG color at run-time, custom code is needed.</li>
					<li>The default background pattern is defined via <code>!vwf_default_text_box_bg_pattern</code> in <code>data/vwfconfig.cfg</code>. A value of <code>$00</code> represents the first tile in <code>vwfbgpatterns.bin</code>, a value of <code>$01</code> the second tile and so forth. Currently, to switch to a different BG pattern at run-time, custom code is needed.</li>
					<li>You should only every use color <code>$01</code> of a palette for BG patterns (that is "the second color from left" in a typical 2BPP four-color palette).
						The reason for this is that colors <code>$02</code> and <code>$03</code> are reserved for fonts.</li>
				</ul>
				That's pretty much all there is to it. To add additional BG patterns to the patch, simply expand the size of <code>vwfbgpatterns.bin</code> by 16 bytes (you can use a hex editor for this) and then draw the new pattern into the newly added empty space in YY-CHR.
			</p>

			<h4 id="resources-text-box-frames" class="text-center">Text Box Frames</h4>
			<p>
				In order to edit text box frames, open up <code>data/gfx/vwfframes.bin</code> in YY-CHR and set the graphics format to <code>2BPP GB</code>.
				Tweak the palettes to your liking, and you should see something like this:
				<img class="d-block m-1 my-2" src="screenshots/yychr-2.png" alt="Screenshot" width="634" height="481"/>
				
			</p>
			
			<p>
				Here's a quick rundown of everything you need to know about text box frames:
				<ul>
					<li>Every 9 8x8 tiles in <code>vwfframes.bin</code> make up one text box style. Here is an explanation on how the different tiles of a style are placed to compose a text box:
						<img class="d-block m-1 my-2 ir-crisp" src="screenshots/frames-1.png" alt="Screenshot" width="588" height="355"/>
					</li>
					<li>The file size of <code>vwfframes.bin</code> must be divisible by 144. That's exactly the size of nine 8x8 tile in 2BPP GB graphics format in YY-CHR.</li>
					<li>The default text box frame is defined via <code>!vwf_default_text_box_frame</code> in <code>data/vwfconfig.cfg</code>. A value of <code>$00</code> represents the first nine tiles in <code>vwfframes.bin</code>, a value of <code>$01</code> the second nine tiles and so forth. Currently, to switch to a different text box frame at run-time, custom code is needed.</li>
					<li>The define <code>!vwf_frame_palette</code> in <code>data/vwfconfig.cfg</code> dictates which section of CGRAM text box frames use for their palette. To give you a better idea of what this means: This define controls which parts of the Lunar Magic palette get overwritten by the text box frame palette while a VWF text box is on screen. Usable values are <code>$00</code> to <code>$07</code>. This image illustrates how these values map onto the palette from Lunar Magic:					
						<img class="d-block m-1 my-2 ir-crisp" src="screenshots/lm-palette-1.png" alt="Screenshot" width="530" height="329"/>
					</li>
					<li>The palettes of text box frames are controlled via the <code>vwf_define_frames()</code> macro in <code>vwfconfig.cfg</code>. Here's quick example for the format:
					<pre><code>
macro vwf_define_frames()
	; Frame $00
	db %00000000,%00000000
	dw rgb_15(00, 00, 00), rgb_15(31, 31, 31), rgb_15(00, 00, 00)
	
	; Frame $01
	db %00000000,%00000000
	dw rgb_15(22, 18, 02), rgb_15(13, 07, 01), rgb_15(04, 02, 00)
	
	; ...
endmacro
</code></pre>
					Here, each pair of <code>db/dw</code> represents one text box frame (the order corresponding to the order of frames in <code>vwfframes.bin</code>). The first line with the <code>db</code> is reserved for future use and currently unused. Fill it with zeros. The second line defines which colors to write into slots <code>$01</code>, <code>$02</code> and <code>$03</code> of the palette defined by <code>!vwf_frame_palette</code>. In other words: This line controls the second, third and fourth color of that palette. You can use the <code>rgb_15()</code> macro to make defining colors a bit easier. The three arguments of this macro represent the <code>R</code>, <code>G</code> and <code>B</code> values of the color, each ranging from <code>0</code> to <code>31</code>, effectively giving you a 15-bit color palette range.
					</li>
				</ul>
				To add additional text box frames to the patch, simply expand the size of <code>vwfframes.bin</code> by 144 bytes (you can use a hex editor for this) and then draw the new text box frame tiles into the newly added empty space in YY-CHR. Add the palette for this new frame to the bottom of <code>vwf_define_frames()</code>.
			</p>

			<h4 id="resources-fonts" class="text-center">Fonts</h4>
			<p>
				Font are the most complex type of resource supported by the patch. It already comes pre-packaged with four of them ready to use (one with support for Japanese text).
				If you do want to make your own fonts, there's three different types of resource files you need to know about: A .bin file containing character glyph graphics, an .asm file
				containing the widths of each character, and a second .asm file containing character-to-glyph mappings. You can find all the pre-packaged fonts in <code>data/fonts</code>.
				Each folder here contains a <code>vwffont.bin</code> containing the graphics and a <code>vwffont.asm</code> containing the character widths. The only exception is the terra_j font,
				which contains multiple .bin files, because there isn't enough space in a single font to contain the entire Japanese character set. For all pre-packaged fonts, <code>data/fonts/vwftable.asm</code> can be used as the character-to-glyph mapping file. Here's a list of things to be aware of when working with fonts:
				<ul>
					<li>To edit the glyph graphics of a font, open the respective .bin file in YY-CHR, set the graphics format to <code>2BPP GB</code> and also set the pattern to <code>FC/NES x16</code>. After tweaking the palettes a little, you should se something like this:
					<img class="d-block m-1 my-2" src="screenshots/yychr-3.png" alt="Screenshot" width="634" height="481"/></li>
					<li>Each 16x16 tile here contains one character glyph.</li>
					<li>Only colors <code>$02</code> and <code>$03</code> of a palette may be used for the glyphs (that is, the third and fourth color of each palette). Color $01, as mentioned previously, is already reserved for the background pattern. Generally, you'll want to use color $02 for the letters and color $03 for their outlines or drop shadows.</li>
					<li>Each glyph should touch the left edge of its tile. This is important for the VWF text generator to work properly. (At least according to past me. I don't remember why that is, and I haven't checked the code to make sure this is actually still true. Whoopsies!)</li>
					<li>However, not the entire width of a glyph tile is actually rendered in a text box. Instead, this is where the character width table files come into a play. Open one up and you should see a format similar to this:
					<pre><code>;Char00to0F:
db $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$06,$06
;Char10to1F:
db $07,$07,$05,$07,$08,$06,$09,$08,$07,$07,$07,$07,$06,$07,$07,$07

;...
</code></pre>
					Each number here represents the pixel width of one glyph from the respective .bin file. The first number is for the first glyph in the .bin file, the second number for the second glyph and so forth. The patch will look up those numbers and use them to determine how many columns of each glyph tile should be rendered, thus creating its variable width text.</li>
					<li>If you don't want to create width tables manually, a Python helper script is included at <code>code/scripts/generate_widths.py</code> which attempts to generate them for you. Just drop your .bin file onto the script and you should get the width table .asm file as an output. A valid installation of Python 2.7 or Python 3.0 is required for this. Note that you might still have to manually touch up the width table a little bit. For example, I personally find it useful to give all digits in a font a unified width, which makes it easier to create clean layouts with them. You can also use the script to generate a fixed-width table by running it from the command line and passing <code>-f</code> as an argument. That will use the widest glyph from the font as the width of all characters.</li>
					<li>The character-to-glyph mapping file is what Asar uses to know which characters in a text command correspond to which glyph in a font .bin file. The format looks like this:
					<pre><code>'0' = $00
'1' = $01
'2' = $02
'3' = $03
'4' = $04
'5' = $05
'6' = $06
'7' = $07
'8' = $08
'9' = $09
'A' = $0A
'B' = $0B
'C' = $0C
'D' = $0D
'E' = $0E
'F' = $0F
'G' = $10
'H' = $11
'I' = $12
; ...
</code></pre>
					Given the mapping from the example above, the command <code>%vwf_text("ABC")</code> would render tiles <code>$0A</code>, <code>$0B</code> and <code>$0C</code> from the current font's .bin file to the text box. In Asar v1.90, only ASCII character mappings are supported, but starting with Asar v2.0, any single-codepoint Unicode characters can be mapped. That makes it possible to even use a mapping for Japanese text (this will likely require running in 16-bit mode). Example:
					<pre><code>'あ' = $0100
'い' = $0101
'う' = $0102
'え' = $0103
'お' = $0104
'か' = $0105
'き' = $0106
'く' = $0107
'け' = $0108
; ...
</code></pre>
The <code>vwftable.asm</code> file that is included by default already includes a conditional to automatically add mappings for Japanese characters when Asar v2.0 or newer is used. Note that at this point in time, the patch does not automatically switch mappings when you switch fonts. You need to do so automatically by using the <code>cleartable</code> and <code>incsrc</code> commands, like so:
					<pre><code>cleartable
incsrc "vwftable_for_my_font.asm"</code></pre>
					Having to do this can be avoided by making all your fonts compatible with the same mapping file.</li>
					<li>Each font can contain up to 256 glyphs (that's equal to four pages in YY-CHR with the settings mentioned above).</li>
					<li>Fonts with more than 256 glyphs can be simulated by just creating separate fonts containing 256 glyphs each. In that case, you might want to use 16-bit mode to access them more easily. This can be useful for languages with a large character set, like Japanese.</li>
					<li>To add a new font to the patch, create a new .bin file with the glyph graphics, a new .asm file with the width table and (if needed) a new .asm file with the character-to-glyph mapping. Then add the following line to the <code>vwf_define_data()</code> macro in <code>vwfconfig.cfg</code>:
					<pre><code>%vwf_add_font("data/fonts/som/vwffont.bin", "data/fonts/som/vwffont.asm", "data/fonts/vwftable.asm")</code></pre>
					Where the first argument is the graphics .bin file, the second argument is the width table .asm file, and the third argument is the character-to-glyph mapping .asm file. The order of <code>%vwf_add_font()</code> calls inside the <code>vwf_define_data()</code> macro determines the ID of each font. The first %vwf_add_font() will be font <code>$00</code>, the second %vwf_add_font() will be <code>$01</code> and so forth. It is crucial that the character-to-glyph mapping file contains at least valid mappings for the characters <code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code> for that respective font, because the functionality of all number-related text functions depends on it.</li>
				</ul>
			</p>
			
			<h4 id="resources-message-files" class="text-center">Message Files</h4>
			<p>
				Message files are probably this patch's most important resource, as they contain its actual guts: the messages themselves. The patch comes pre-packaged with a single message file at <code>data/vwfmessages.asm</code>. It's unlikely you'll ever have to create a new one. For 99% of use cases, just editing the existing file will be sufficient. There's only a few potential scenarios that I can think of where creating additional message files might be useful or even required:
				<ul>
					<li>If your hack contains such a massive amount of text that it no longer fits into a single bank, you'll have to create additional message files and split your text between them.</li>
					<li>If you're working on a hack with multi-language support, it might make sense to put each language into its own message file so that translators can work on them simultaneously.</li>
				</ul>
				Anyways, for the few people who have legitimate reasons to create new message files, here's a brief explanation on them. Note that it only covers the format of message files themselves, not on the messages within them. See section <a href="#message-format">Message Format</a> for details on that.
				<ul>
					<li>To add a new message file to the patch, first create it, then add the following line to the <code>vwf_define_data()</code> macro in <code>vwfconfig.cfg</code>:
					<pre><code>%vwf_add_messages("data/vwfmessages.asm", "data/fonts/vwftable.asm")</code></pre>
					Where the first argument is the path to the message file itself and the second argument is the path to the default character-to-glyph mapping file to use for it (see section <a href="#resources-fonts">Fonts</a> for details).</li>
				</ul>
				That's really all there is to it.
			</p>

			<h3 id="message-format" class="text-center">Message Format</h3>
			<p>
				Adding new messages to this patch is as simple as doing this and that. Up to 2AAA. TODO TODO TODO
			</p>

			<h4 id="header-settings" class="text-center">Header Settings</h4>
			<p>
				The first thing to do when setting up a dialogue is creating a header for it. This header is mandatory;
				not having it will cause glitches in the game. It allows you to easily set up position, width, height
				and other settings of the text box during that one specific dialogue. Let’s say we wanted to edit
				<code>Message0005</code>. The first thing I always do is adding <code>.header</code> and <code>.body</code>
				sublables to each message. Sublables are a special kind of labels in Asar which can be reused inside the same patch,
				as long as they’re not used under the same main label. The main label in this case would be <code>Message0005:</code>.
				After adding sublabels we’d have:
				<pre><code>Message0005:	; Message 002-2
.header
.body</code></pre>
				Now we can put the dialogue header under the <code>.header</code> sublabel and the actual text under the
				<code>.body</code> sublabel for easier orientation. Let’s get to the basic format of headers now.
				<pre><code>Message0005:	; Message 002-2
.header
db $aa
db %bbbbbccc,%ccddddee,%eeffffgg,%gghhhhhh,$ii,%jjjj----
dw $kkkk,$llll
db %mnnnop-q
db %rrssttuu,$vv,$ww,$xx,$yy
db %------z1
dl MessageASMLoc
dl .MessageSkipLoc

.body</code></pre>
				Simply copy and paste this header for the start. All numbers prefixed with <code>%</code> require binary digits,
				while numbers prefixed with <code>$</code> require digits in hex. Simply set the Windows calculator to Programmer
				mode for this using <code>Alt+3</code>.
			</p>

			<dl>
				<dt id="dialog-header-aa"><code>aa</code></dt>
				<dd><p>
					This is the font to use for the dialogue. By default only one font will be inserted
					in the game and you’ll have to put in <code>00</code> here. Also here we have the first difference
					between 8-Bit and 16-Bit mode: In 16-Bit mode you MUST skip this line. Otherwise you’ll
					get glitches. Why? Well in 16-Bit mode the high byte of each character is used as the font
					number, so I figured this byte in the header would be redundant. On a second thought I realise
					that this just causes additional confusion for just one single byte you save per message,
					but I did it like this anyways, so keep it in mind if you’re ever going to use 16-Bit mode.
				</p></dd>
				<dt id="dialog-header-bbbbb"><code>bbbbb</code></dt>
				<dd><p>
					The text box <b>X</b> position. As I mentioned: In binary, since this is prefixed with <code>%</code>.
					The maximum here is <code>%11100</code>, but don’t worry if you enter an invalid value here. For certain
					values in the header - like the text box position and size - I programmed in validation
					checks to prevent nasty effects. Depending on the text box size the maximum for this value
					might change. If you were using the full width of the screen for the text box the maximum
					here would be <code>%00000</code> for example. Limitations like this apply for a few other settings as well.
				</p></dd>
				<dt id="dialog-header-ccccc"><code>ccccc</code></dt>
				<dd><p>
					Same as <code>bbbbb</code>, but for the <b>Y</b> position. Maximum here is <code>%11000</code>.
				</p></dd>
				<dt id="dialog-header-dddd"><code>dddd</code></dt>
				<dd><p>
					The <b>width</b> of the text box. This only counts the inside of the box, not the frame. It also
					counts 16×16 tiles, not 8×8 tiles. So <code>%0010</code> would mean "2 16×16 tiles + frame"
					for example. The maximum input here is <code>%1111</code>.
				</p></dd>
				<dt id="dialog-header-eeee"><code>eeee</code></dt>
				<dd><p>
					Same as <code>dddd</code>, except for the <b>height</b>. The maximum input here is <code>%1101</code>.
				</p></dd>
				<dt id="dialog-header-ffff"><code>ffff</code></dt>
				<dd><p>
					How many pixels of space to leave at the left and right edge of the text box. I usually
					use <code>4</code> pixels (<code>%0100</code>) here.
				</p></dd>
				<dt id="dialog-header-gggg"><code>gggg</code></dt>
				<dd><p>
					The pixel width of a space. I recommend to use at least 7 pixels (<code>%0111</code>) here.
					The reason for this has to do with the "change palette" command in dialogues.
					I’ll go more into detail there.
				</p></dd>
				<dt id="dialog-header-hhhhhh"><code>hhhhhh</code></dt>
				<dd><p>
					The text speed. This is interpreted as "frames to wait between letters". I usually use
					<code>%000000</code> here (for the fastest text speed).
				</p></dd>
				<dt id="dialog-header-ii"><code>ii</code></dt>
				<dd><p>
					Auto wait options. In other words:"What to do if using a Line Break while at the bottom
					of the text box".
					<table class="kv-map"><tbody>
						<tr><th><code>$00</code></th><td>Instantly clear the text box and continue.</td></tr>
						<tr><th><code>$01</code></th><td>Wait for the player to press the A button.</td></tr>
						<tr><th><code>$02</code>-<code>$FF</code></th><td>Wait that many frames.</td></tr>
					</tbody></table>
				</p></dd>
				<dt id="dialog-header-jjjj"><code>jjjj</code></dt>
				<dd><p>
					Text box creation options.
					<table class="kv-map"><tbody>
						<tr><th><code>%0000</code></th><td>Don’t use a text box.</td></tr>
						<tr><th><code>%0001</code></th><td>Secret of Evermore style. Expand box from top to bottom.</td></tr>
						<tr><th><code>%0010</code></th><td>Secret of Mana style. Expand box from the middle.</td></tr>
						<tr><th><code>%0011</code></th><td>Mega Man Zero style. Expand box from left to right.</td></tr>
						<tr><th><code>%0100</code></th><td>Instantly show complete box.</td></tr>
					</tbody></table>
				</p></dd>
				<dt id="dialog-header-kkkk"><code>kkkk</code></dt>
				<dd><p>
					Third color of the palette selected using <a href="#dialog-header-nnn"><code>nnn</code></a>
					in SNES RGB. Usually the color of your letters.
				</p></dd>
				<dt id="dialog-header-llll"><code>llll</code></dt>
				<dd><p>
					Same as <code>kkkk</code>, but for the fourth color. Usually the color of the shading of your letters.
				</p></dd>
				<dt id="dialog-header-m"><code>m</code></dt>
				<dd><p>
					Whether to freeze sprites or not.
					<table class="kv-map"><tbody>
						<tr><th><code>%0</code></th><td>Don’t freeze sprites.</td></tr>
						<tr><th><code>%1</code></th><td>Freeze sprites.</td></tr>
					</tbody></table>
					I recommend <code>%1</code>.
				</p><p>
					<code>0</code> can lead to glitches in the current version if - for example - you die
					while a dialogue is being processed. Also it is pretty slow. If you really want to use it
					I recommend using the SA-1 patch. This actually makes the result run at full speed.
					See the <a href="#problem-solving">Problem Solving</a> section for more information.
				</p></dd>
				<dt id="dialog-header-nnn"><code>nnn</code></dt>
				<dd><p>
					The palette to use for the inside of the text box. Read: The text box background and the
					letters. This has the same restrictions as <code>!framepalette</code> from section 2.
					Never use the same palette for the frame and for the letters. Both palettes will be changed
					during dialogue processing, so doing that would most likely cause weird color changes,
					unless you use the exact same colors for them.
				</p></dd>
				<dt id="dialog-header-o"><code>o</code></dt>
				<dd><p>
					The text layout.
					<table class="kv-map"><tbody>
						<tr><th><code>%0</code></th><td>Regular layout.</td></tr>
						<tr><th><code>%1</code></th><td>Centered layout.</td></tr>
					</tbody></table>
				</p></dd>
				<dt id="dialog-header-p"><code>p</code></dt>
				<dd><p>
					Speedup options.
					<table class="kv-map"><tbody>
						<tr><th><code>%0</code></th><td>Don’t allow speedup.</td></tr>
						<tr><th><code>%1</code></th><td>Allow speedup.</td></tr>
					</tbody></table>
					Speedup only applies if a dialogue uses a text speed which is slower than <code>%000000</code>. In that case,
					if you put a <code>%1</code> here, the player can speedup dialogues by holding the A button.
				</p></dd>
				<dt id="dialog-header-q"><code>q</code></dt>
				<dd><p>
					Disable all text box sound effects.
					<table class="kv-map"><tbody>
						<tr><th><code>0</code></th><td>Don’t disable.</td></tr>
						<tr><th><code>1</code></th><td>Disable.</td></tr>
					</tbody></table>
					Warning: If you put a <code>1</code> here, then it’s mandatory to skip the next line
					(that means everything from <code>rr</code> to <code>yy</code>) completely,
					otherwise this will cause glitches.
				</p></dd>
				<dt id="dialog-header-rr"><code>rr</code></dt>
				<dd><p>
					The bank to use for the letter sound effect.
					<table class="kv-map"><tbody>
						<tr><th><code>%00</code></th><td><code>$1DF9</code></td></tr>
						<tr><th><code>%01</code></th><td><code>$1DFA</code></td></tr>
						<tr><th><code>%10</code></th><td><code>$1DFB</code> (Not recommended to use)</td></tr>
						<tr><th><code>%11</code></th><td><code>$1DFC</code></td></tr>
					</tbody></table>
				</p></dd>
				<dt id="dialog-header-ss"><code>ss</code></dt>
				<dd><p>
					Same as <code>rr</code>, but for the "waiting for A button" sound effect.
				</p></dd>
				<dt id="dialog-header-tt"><code>tt</code></dt>
				<dd><p>
					Same as <code>rr</code>, but for the cursor sound effect.
				</p></dd>
				<dt id="dialog-header-uu"><code>uu</code></dt>
				<dd><p>
					Same as <code>rr</code> but for the "pressed A" sound effect.
				</p></dd>
				<dt id="dialog-header-vv"><code>vv</code></dt>
				<dd><p>
					The actual sound effect to use for letters.
				</p></dd>
				<dt id="dialog-header-ww"><code>ww</code></dt>
				<dd><p>
					Same as <code>vv</code>, but for the "waiting for A button" sound effect.
				</p></dd>
				<dt id="dialog-header-xx"><code>xx</code></dt>
				<dd><p>
					Same as <code>vv</code>, but for the cursor sound effect.
				</p></dd>
				<dt id="dialog-header-yy"><code>yy</code></dt>
				<dd><p>
					Same as <code>vv</code>, but for the "pressed A" sound effect.
				</p></dd>
				<dt id="dialog-header-z"><code>z</code></dt>
				<dd><p>
					MessageASM flag.
					<table class="kv-map"><tbody>
						<tr><th><code>0</code></th><td>Disable MessageASM</td></tr>
						<tr><th><code>1</code></th><td>Enable MessageASM</td></tr>
					</tbody></table>
					This allows you to run custom code for this text box every frame that it's up until it closes. Think of it
					like UberASM for text boxes. This can be used to do things like run scripts for a cutscene or create custom
					menus.
				</p></dd>
				<dt id="dialog-header-1"><code>1</code></dt>
				<dd><p>
					Skip Message flag.
					<table class="kv-map"><tbody>
						<tr><th><code>0</code></th><td>Disable message skip</td></tr>
						<tr><th><code>1</code></th><td>Enable message skip</td></tr>
					</tbody></table>
					This allows you to define whether the text pointer is allowed to be modified with the start button. This can
					be used to do things like allow the player to close a textbox early, but it can have other uses if used with 
					the $F1 command.
				</p></dd>
				<dt id="dialog-header-MessageASMLoc"><code>MessageASMLoc</code></dt>
				<dd><p>
					24-bit pointer to the textbox's MessageASM routine. This must point to ASM code to work correctly. If MessageASM
					is disabled, comment out this pointer by putting a ; in front of it, otherwise your text box will glitch.
				</p></dd>
				<dt id="dialog-header-MessageSkipLoc"><code>.MessageSkipLoc</code></dt>
				<dd><p>
					Same as <code>MessageASMLoc</code>, except for the skip function and it must point to text data rather than ASM
					code.
				</p></dd>
			</dl>
			<p>
				WHEW! After being done with the header you’ll now finally get to really, really, really write some text
				for your dialogues.
			</p>

			<h4 id="text-commands" class="text-center">Text Commands</h4>
			<p>
				So if you’re using the same labels as I suggested in this manual then what you’re going to edit now is
				the part under the <code>.body</code> sublabel, which is the actual dialogue.
			</p>
			<dl>
				<dt>Regular Text</dt>
				<dd><p>
					The first thing you’ll obviously want to do is using regular text. Here we have a difference
					between 8-Bit and 16-Bit mode. In 8-Bit mode, regular text goes like this:
					<pre><code>db $03,$AF,$34,$CD,$A3,$5B
[...]</code></pre>
					So basically you just write the hex value of whatever character from the font file you want
					to display in a table. In 16-Bit mode it works like this:
					<pre><code>dw $0003,$00AF,$0034,$01CD,$00A3,$025B
[...]</code></pre>
					The main difference here of course is that you need two bytes per character and the high byte
					is interpreted as the font file to use. So in this case it would be something like this:
					<table><tbody>
						<tr><th>Font <code>$00</code></th><td class="pl-1">– Charcter <code>$03</code></td></tr>
						<tr><th>Font <code>$00</code></th><td class="pl-1">– Charcter <code>$AF</code></td></tr>
						<tr><th>Font <code>$00</code></th><td class="pl-1">– Charcter <code>$34</code></td></tr>
						<tr><th>Font <code>$01</code></th><td class="pl-1">– Charcter <code>$CD</code></td></tr>
						<tr><td colspan="2"><pre><code>[...]</code></pre></td></tr>
					</tbody></table>
					Always putting in everything as hex characters would become really annoying after a while.
					Therefore there is an easier way of doing it. It goes like this:
					<pre><code>db "Hi there! Put some text here!"</code></pre>
					So basically you just put the text you want to display in quotations. What Asar does then
					is looking up the characters in the file <code>vwftable.txt</code> and converting them into the according
					hex numbers when assembling the file. This makes writing texts a lot easier. Be careful, though.
					It seems like many characters are incompatible with Asar. I’ve especially noticed this with
					some special characters, like the German “ü” for example. Sometimes - if you’re very unlucky
					- they mess up the dialogues completely, but usually they just turn out as hex number $00. If that
					ever happens to you something you can do is this:
					<pre><code>db "Text 1 ",$34,"Text 2"</code></pre>
					This should be self explanatory. So here are a few valid examples:
					<pre><code>db "Hello there!"
db "Pi ",$35," 3.141..."     ; The $35 here could be an equal sign or something
db $03,$40,$AF,"More text!"
db $AB,$54,$DF
[...]</code></pre>
					Make sure never to forget the commas in your tables and the quotations around text inputs.
					So that’s it for regular text. As much as you can do with regular text, this alone won’t be
					enough to create proper dialogues. You’ll need a bunch of special characters to cause certain
					events during a dialogue. Some of them are mandatory to use in each dialogue, others are
					optional. To use these special commands simply put their hex codes into the text where they
					should be activated. Here is a list of each and every special character available.
				</p><p>
					<b>Notice:</b> In 16-Bit mode you need to use $FF as a high byte for each special character
					(like "$FFFA" for example) and you can’t put the text in quotes.
				</p></dd>
				<dt id="text-command-ff"><code>$FF</code> - End Dialogue</dt>
				<dd><p>
					This character ends a dialogue and is mandatory to put at the end of EVERY dialogue.
					Not using it means the dialogue will continue forever and eventually start to display
					random text. After the patch reads an <code>$FF</code> the dialogue will end and the text box will
					vanish, using the style defined in the dialogue header.
				</p></dd>
				<dt id="text-command-fe"><code>$FE</code> - Space</dt>
				<dd><p>
					This puts a space into your text (using as many pixels as defined in the dialogue
					header. It does something else, too. It activates the Word Wrap function.
					At first it calculates the length of the next word, then, if that word doesn’t fit into
					the current line anymore, it automatically causes a Line Break. Also, if you look at the bottom of
					<code>vwftable.txt</code>, you can see that a space inside quotations is automatically converted
					to <code>$FE</code>. I recommend not to change this.
				</p></dd>
				<dt id="text-command-fd"><code>$FD</code> - Force Line Break</dt>
				<dd><p>
					This - as the name suggests - forces a Line Break. Don’t forget: If using a Line Break
					while already at the bottom line of the text box, the patch will do whatever you’ve
					defined in the Auto wait options in the dialogue header.
				</p></dd>
				<dt id="text-command-fc"><code>$FC</code> - Set Message Number</dt>
				<dd><p>
					This clears the text box, loads message $XXXX, loads the header from the new message
					and then displays the new message. Usage:
					<pre><code>db $FC
dw $XXXX</code></pre>
					This is the command you have to use if you want to change the position and size of
					the text box during a dialogue (as seen in the beginning of Video 2).
				</p></dd>
				<dt id="text-command-fb"><code>$FB</code> - Modify Text Pointer</dt>
				<dd><p>
					This makes the patch read text from another address. Usage is like this:
					<pre><code>db $FB
dl Address</code></pre>
					Here is an example:
					<pre><code>db "Hey you!",$FD,$FB
dl .part2

db "Bla bla bla..."

.part2
db "What are you doing there?"</code></pre>
					This will display the text "Hey you!", then cause a Line Break ($FD) and then display
					the text "What are you doing there?". As you can see, the part in the middle is skipped
					completely. You could also use this to create infinite loops:
					<pre><code>db "Bla "

.loop
db "bla ",$FB
dl .loop</code></pre>
					This will display infinite "bla"s.
				</p></dd>
				<dt id="text-command-fa"><code>$FA</code> - Wait for A Button</dt>
				<dd><p>
					This is a command which you’ll use a lot in your messages. It makes the game wait
					for the player to press the A button. Usually you’ll at least put it in front of the
					$FF at the end of each dialogue, otherwise the text box would just be closed and the
					player wouldn’t even get to read everything in time. Of course, if you need to, you can
					also put it inbetween text. Here is an example:
					<pre><code>db "I like you a lot... ",$FA
db "NOOOT!",$FA,$FF</code></pre>
					Also, whenver the game reads this character, it starts displaying that blinking cursor
					at the bottom of the text box until the player presses the A button.
				</p></dd>
				<dt id="text-command-f9"><code>$F9</code> - Wait for <code>$XX</code> frames</dt>
				<dd><p>
					This makes the patch wait for <code>$XX</code> frames. Usage is like this:
					<pre><code>db $F9,$XX</code></pre>
				</p></dd>
				<dt id="text-command-f8"><code>$F8</code> - Change Text Speed</dt>
				<dd><p>
					This changes the text speed to <code>$XX</code>. Usage is like this:
					<pre><code>db $F8,$XX</code></pre>
					I went more into detail on this in the explanation of dialogue headers.
				</p></dd>
				<dt id="text-command-f7"><code>$F7</code> - Display Decimal Number</dt>
				<dd><p>
					The first somewhat complex function. It takes the content of a RAM address, converts
					it to a decimal number and then displays it. Usage is like this:
					<pre><code>db $F7
dl Address
db $BZ</code></pre>
					"Address" of course means the RAM address. Refer to the SMW Central RAM Map for this.
					B is how many Bits the number has (<code>0</code> means 8-Bit and <code>1</code> means 16-Bit)
					and <code>Z</code> defines whether to display prefixed zeros or not (<code>0</code> for yes, <code>1</code> for no).
					Here is an example:
					<pre><code>db $F7
dl $7E0DBF
db $01</code></pre>
					<code>$7E0DBF</code> contains the current player’s coins. Since this is an 8-Bit value,
					<code>B = 0</code>. We want to wipe any prefixed zeros, so <code>Z = 1</code>.
					Also, in order for this function to work, the digits <code>0</code> to <code>9</code>
					have to be the first characters in your font file and in the correct order.
					Look into <code>vwffont1.bin</code> to see what I mean.
				</p></dd>
				<dt id="text-command-f6"><code>$F6</code> - Display Hexadecimal Number</dt>
				<dd><p>
					Takes the content of a RAM address and displays it as a hex number.
					Usage is like this:
					<pre><code>db $F6
dl Address</code></pre>
					This one is a lot simpler then the decimal one, which is mainly for the reason that
					the SNES uses hex addressing and values natively. In order for this function to work,
					the digits <code>0</code> to <code>F</code> have to be the first characters in your
					font file and in the correct order. Look into <code>vwffont1.bin</code> to see what I mean.
				</p></dd>
				<dt id="text-command-f5"><code>$F5</code> - Display RAM Character</dt>
				<dd><p>
					Takes the content of a RAM address as the next character to display.
					Usage is like this:
					<pre><code>db $F5
dl Address</code></pre>
					The difference to <code>$F6</code> is that <code>$F6</code> displays the actual hex value,
					while <code>$F5</code> displays the character of the value. So if we were using <code>$7E0DBF</code>
					once again and the player had <code>$19</code> coins, <code>$F6</code> would display <code>19</code>,
					while <code>$F5</code> would display character <code>$19</code> from the font file in use.
					In <code>vwffont1.bin</code> this would be a <b>P</b>. Here are screenshots of
					<code>$F5</code>, <code>$F6</code> and <code>$F7</code> all being used in the same text box:
					<img class="d-block m-1 my-2 ir-crisp" src="screenshots/screen-2.png" alt="Screenshot" width="256" height="224"/>
					<img class="d-block m-1 my-2 ir-crisp" src="screenshots/screen-3.png" alt="Screenshot" width="256" height="224"/>
					The timer uses <code>$F5</code>, the hexadecimal numbers use <code>$F6</code>
					and the decimal numbers use <code>$F7</code>.
				</p></dd>
				<dt id="text-command-f4"><code>$F4</code> - Display Character</dt>
				<dd><p>
					This displays character <code>$XX</code>. Usage is like this:
					<pre><code>; 8-Bit mode
db $F4,$XX

; 16-Bit mode
dw $FFF4,$XXXX</code></pre>
					You may wonder what the point of this function is. Well, let’s say you had a font file
					with 256 characters and you wanted to display character <code>$FF</code>. How would you do that?
					If you used <code>db $FF</code>, the game would treat this as special character <code>$FF</code>
					and end the dialogue. Using <code>db $F4,$FF</code>, however, it would display character
					<code>$FF</code> instead. So basically this function is for displaying characters that
					would otherwise be treated as special characters.
				</p></dd>
				<dt id="text-command-f3"><code>$F3</code> - Change Text Palette</dt>
				<dd><p>
					This changes the palette currently in use for text to <code>XXX</code>
					(Maximum: <code>%111</code> = <code>7</code>). Usage is like this:
					<pre><code>db $F3,%-----XXX</code></pre>
					What is this useful for? It allows you to use multiple colors for your text inside
					the same text box. Be careful as this overwrites the second color of whatever palette
					you’re going to use with the background color of the text box. Therefore, this has the
					same restrictions as the letter palette from the dialogue header. This function is also
					the reason why you should always use at least <code>$07</code> pixel for spaces. How so?
					Well, natively Layer 3 on the SNES only supports 8×8 tiles. To have VWF text new graphics
					are created in RAM that have multiple letters on one 8×8 tile. Palettes, however, are
					connected with 8×8 tiles, not with letters. Therefore, if two or more letters end up
					on one tile and you’re using this command, all these letters will change their color,
					even if you only planned to change the color of one of them. If there are at least
					<code>$07</code> pixels of space between letters they will never end up on the same tile,
					though. This also means that you should use a space before using this command, as changing
					the text palette in the middle of a word will lead to minor graphical glitches affecting
					the two or more letters present on the same 8×8 tile.
				</p><p>
					Note that the <a href="#text-command-ed"><code>$ED</code> - Clear Text Box</a> command
					will reset the currently used pallete to the default settings for the current message.
				</p></dd>
				<dt id="text-command-f2"><code>$F2</code> - Change Font</dt>
				<dd><p>
					Changes the number of the Font in use to <code>$XX</code>. In short, the same stuff
					as the first option in the header. Also in 16-Bit mode this command is redundant
					as it does nothing. Usage:
					<pre><code>db $F2,$XX</code></pre>
				</p></dd>
				<dt id="text-command-f1"><code>$F1</code> - Execute Code</dt>
				<dd><p>
					Executes ASM code at whatever address you use. It does that by <code>JSL</code>ing to it,
					so the code should end on an <code>RTL</code>. This is one of the most useful commands
					in the patch, but only for people experienced with ASM. Usage is like this:
					<pre><code>db $F1
dl Address</code></pre>
					So what makes this function so special? Well aside from the fact that (with some ASM
					knowledge) you can basically do everything during dialogues this - just like character
					<code>$FB</code> - also lets you modify the text pointer. In combination with the ASM code this makes
					conditional text jumps possible. In other words: It allows you to display different
					text if certain conditions are met. This is demonstrated in video 2 by the Toad who sells
					star power. If you answer his question with “Yes”, he only sells the star power to you if you
					have enough coins. Some code that does just that can be seen here:
					<pre><code>.body
db "Here you go!",$F1
dl .checkcoins

db " Thank you very much!",$FA,$FF

.notenough
db " Wait, you don’t even have enough coins!",$FA,$FF

.checkcoins
<table class="border-0" style="line-height:19px;"><tbody>
<tr><td>!number	</td><td>= #40	</td></tr>
<tr><td>!address	</td><td>= $0DBF	</td></tr>
<tr><td>!destination	</td><td>= .notenough	</td></tr>
</tbody></table>

lda !address
cmp !number
bcc .changepointer
sec
sbc !number
sta !address
rtl

.changepointer
<table class="border-0" style="line-height:19px;"><tbody>
<tr><td>lda.b #!destination	</td><td>; Destination address low byte	</td></tr>
<tr><td>sta !vwftextsource	</td><td>; Text pointer low byte	</td></tr>
<tr><td>lda.b #!destination>>8	</td><td>; Destination address high byte	</td></tr>
<tr><td>sta !vwftextsource+1	</td><td>; Text pointer high byte	</td></tr>
<tr><td>lda.b #!destination>>16	</td><td>; Destination address bank byte	</td></tr>
<tr><td>sta !vwftextsource+2	</td><td>; Text pointer bank byte	</td></tr>
</tbody></table>
rtl</code></pre>
					What this will do is first display the text <q>Here you go!</q>. Then it will execute
					the code at <code>.checkcoins</code>. Here it will compare the address <code>$0DBF</code>
					(the current player’s coins) with <code>40</code>. If it is bigger or equal,
					it will simply return without changing the text pointer and display <q>Thank you very much!</q>.
					Otherwise it will change the text pointer to <code>.notenough</code> and display
					<q>Wait, you don’t even have enough coins!</q>.
				</p><p>
					Also as you can see here you modify the text pointer by writing to <code>!vwftextsource</code>,
					with <code>!vwftextsource</code> being the low byte and <code>!vwftextsource+2</code> being the bank byte.
					You can also see that I simply put the code under the text. This is OK and recommended as long as the
					code is in a place where it can not be reached by the VWF system.
				</p><p>
					<b>In other words:</b> After an <code>$FF</code> should be fine,
					in the middle of a message should be avoided.
				</p><p>
					Another thing I recommend is always putting a space or line break after this command
					(in this case it’s the space in front of <q>Thank you</q>. The reason for this is that
					this command is ignored by the word wrap function. This function gets the correct widt
					by counting the width of all characters between a space and some other special character
					(like a Line Break or another space). So in this case: If you don’t put a space (or whatever
					other character is suitable) after this command, the word wrap function will count the
					<q>Thank</q> as part of the same word, even if eventually that word won’t even be written at
					all. This might lead to automatic line breaks at the wrong places.
				</p><p>
					<b>In short:</b> Always put a space after this command.
				</p></dd>
				<dt id="text-command-f0"><code>$F0</code> - Display Options</dt>
				<dd><p>
					This is - without any doubt - the most complex of all special commands. This function
					gives the player various options in the text box, which he can then select with a
					cursor. After that the text pointer is changed to another address depending on the
					option the player selected. Usage is like this:
					<pre><code>db $F0,$ns
<table class="border-0" style="line-height:19px;"><tbody>
<tr><td>db $cc	</td><td>; If in 8-Bit mode</td></tr>
<tr><td>dw $cccc	</td><td>; If in 16-Bit mode</td></tr>
</tbody></table>
dl ..option_1
[...]
[dl ..option_n]

db "Option 1 Text",$FD
[...]
[db "Option n Text",$FD]

..option_1
db "You selected option 1!",$FA,$FF
[...]
[..option_n]
[db "You selected option n!",$FA,FF]</code></pre>
					Yup, I told you this function was complex. So let’s go through everything step by step.
				</p><p>
					<code>n</code> is the number of options to give the player. <code>1</code> is the minimum
					and the text box height the maximum number of options you can have. If you put more options
					here than fit into a complete text box of the current height the game will simply ignore them.
				</p><p>
					If there is some text in the text box already and because of that not all options would fit
					into it at the same time, the text box will be cleared. Oh, did I already mention that
					this command automatically causes a Line Break if not already at the beginning of a
					line?
				</p><p>
					<code>s</code> is the space to leave between cursor and the following letter.
					I usually put a 4 here. The next thing, <code>cc</code> (or <code>cccc</code> in 16-Bit mode)
					is the character from the font to use as the cursor. The default font has a very decent
					cursor as character <code>$A8</code>, so I recommend using this.
				</p><p>
					Next is the label table with a length equal to the value you used for <code>n</code>.
					To give a few examples: If <code>n</code> = <code>3</code>, put 3 <code>dl</code>
					entries here. If <code>n</code> = <code>5</code>, put 5 <code>dl</code> entries here.
					Don’t mess this up; doing so here can easily cause glitches.
				</p><p>
					This table contains the labels to set the text pointer to for each of the options.
					So if the player selects the first option, the first label will be used.
					If the player selects the third option, the third label will be used.
					Because of this the number of entries always has to match <code>n</code>.
				</p><p>
					Next up are the lines for the actual text of each option. What is important here is
					that whenever a Line Break occurs - whether it’s a forced or an automatic Line Break
					- the next new line will automatically be treated as the next option. This will continue
					until until as many Line Breaks as there are options have occured. After that the player
					will be able to move the cursor. This also means: Always make sure that all the text for
					one option fits in one line and always have as many Line Breaks as you have options.
				</p><p>
					So if your <code>n</code> is 2, have 2 Line Breaks. If your <code>n</code> is 5, have 5 Line Breaks.
					It’s very important to follow this rule. And don’t - by all means - put any obscure character in the
					middle of option text.
				</p><p>
					<code>$FF</code>, for example, counts as an obscure character here.
					As using this character inside option text would most likely cause unexpected effects
					I’ve made it so that <code>$FF</code> is treated as <code>$FD</code> during option processing.
					Still it’s not recommended to use it. The best thing is to simply stick to <code>$FD</code> here and not use any
					other special character.
				</p><p>
					So yeah, that’s basically it. All you have to do now is set up some text for each entry
					in the label table and you’re done. After the player has selected an option, the text box
					will automatically be cleared. I know this is very, very complicated but I didn’t see any
					other way to implement this feature and if you just play around with it a bit you’ll get
					used to it faster than you think.
				</p><p>
					Anyways, here is an example of some valid code:
					<pre><code>db "Do you want to buy a 1-UP?"
db $F0,$24,$A8
dl .yes
dl .no
db "Yes",$FD
db "No",$FD

.yes
db "Thank you very much!",$FA,$FF

.no
db "Too bad. Come again later!",$FA,$FF</code></pre>
					See? It only LOOKS complicated, but it’s actually rather simple.
				</p></dd>
				<dt id="text-command-ef"><code>$EF</code> - Setup Teleport</dt>
				<dd><p>
					This sets up a teleport which will occur as soon as dialogue processing is over.
					Usage is like this:
					<pre><code>db $EF
dw $llll
db %----w-s-</code></pre>
					<code>lll</code> is the level to teleport to or the secondary exit number to use. This can be
					anything from <code>$000</code> to <code>$1FF</code> for level destinations or <code>$0000</code> to <code>$1FFF</code> for
					secondary entrance destinations. Set <code>s</code> to <code>1</code> if <code>llll</code> should
					be used as a secondary exit number, otherwise set it to <code>0</code> to use <code>llll</code> as
					the destination level number. The effect of <code>w</code> will vary depending on whether the destination
					is a level or secondary entrance.
				</p><p>
					If it's a level:
					<table class="kv-map"><tbody>
						<tr><th><code>0</code></th><td>Go to level entrance</td></tr>
						<tr><th><code>1</code></th><td>Go to midway entrance</td></tr>
					</tbody></table>
				</p><p>
					If the destination is a secondary entrance:

					<table class="kv-map"><tbody>
						<tr><th><code>0</code></th><td>Normal level</td></tr>
						<tr><th><code>1</code></th><td>Water level</td></tr>
					</tbody></table>
				</p><p>
					<h6>Example:</h6>
					<pre><code>db $EF
dw $010D
db %00000000</code></pre>
				</p></dd>
				<dt id="text-command-ee"><code>$EE</code> - Edit Color</dt>
				<dd><p>
					This command sets color <code>$XX</code> to SNES RGB <code>$YYYY</code> and	is to be used
					together with <a href="#text-command-f3"><code>$F3</code> - Change Text Palette</a>.
					Usage is like this:
					<pre><code>db $XX
dw $YYYY</code></pre>
					I recommend only to use <code>$00</code> to <code>$1F</code> for <code>$XX</code>,
					as these are the only colors that are restored at the end of the dialogue.
					Also once again avoid using colors that are used by the background or anything
					else that is visible during dialogue processing.
				</p><p>
					Here is an example of it being used:
<pre><code><table class="border-0" style="line-height:19px;"><tbody>
<tr><td>db $EE,$1A	</td><td>; Palette $06, Third Color	</td></tr>
<tr><td>dw $031F	</td><td>; Dark Yellow	</td></tr>
<tr><td>db $EE,$1B	</td><td>; Palette $06, Fourth Color	</td></tr>
<tr><td>dw $0000	</td><td>; Black	</td></tr>
</tbody></table>
db $F3,%00000110
db "Mario:",$FD
db $F3,%00000111
db "Hi there!",$FA,$FF</code></pre>
				</p></dd>
				<dt id="text-command-ed"><code>$ED</code> - Clear Text Box</dt>
				<dd><p>
					This command clears the text box, resets the text position to the top of the text box
					and resets the current text palette to the default for this message.
				</p></dd>
				<dt id="text-command-ec"><code>$EC</code> - Play BGM</dt>
				<dd><p>
					This changes the background music to <code>$XX</code>. Usage is like this:
					<pre><code>db $EC,$XX</code></pre>
					Of course it has the usual music restrictions, like "only using custom music
					from the same bank" if using carol’s or Romi’s Addmusic and stuff like that. That’s
					all there is to say about this command.
				</p></dd>
				<dt id="text-command-eb"><code>$EB</code> - Freeze Textbox</dt>
				<dd><p>
					This freezes the textbox indefinitely until something modifies the text pointer. This is
					meant to be used alongside MessageASM to give your custom message code more control over
					the textbox.
				</p></dd>
				<dt id="text-command-e9-ea"><code>$E9-$EA</code> - Unused</dt>
				<dd><p>
					These commands are reserved for future use. Do not use them.
				</p></dd>
				<dt id="text-command-e8"><code>$E8</code> - Use Text Macro</dt>
				<dd><p>
					This acts like a JSR for the textbox system. Usage is like this:
					<pre><code>db $E8 : dw $XXXX</code></pre>
					Where <code>$XXXX</code> is the ID of the text macro to use and can be from anywhere from $0000 to $FFFF.
					What this does specifically is it allows you to display a string you've defined and have the
					textbox continue where it left off. This is an incredibly useful feature if you want to reduce
					the size of your message text.
				</p><p>
					For example, let's say I want to display "Princess Peach". Each time you type that, you use up
					14 bytes of space (28 in 16-bit mode) and you have a chance of accidentally typing it incorrectly.
					With text macros, you can store "Princess Peach" once and display it anytime using just 3 bytes
					(4 in 16-bit mode) each. The more frequently you need to use "Princess Peach" in your text, the
					more bytes you save.
				</p><p>
					To define your own custom text macros, go to the bottom of vwfmessages.asm and you'll find a bunch of
					.TMXXXX labels. Put any string of text/commands under those labels like so:
				</p><p>
<pre><code>.TM0001
db "Princess Peach",$E7</code></pre>
					From there, using <code>db $E8 : $0001</code> in a message will display "Princess Peach".
				</p><p>
					Note that 256 text macro pointers are given by default, with the first 16 reserved for buffered strings.
					If you need more text macros, then the pointers are found in vwfmessagepointers.asm. You can have a maximum
					of 65,536 unique text macros, which is likely more than you'll ever need.
				</p></dd>
				<dt id="text-command-e7"><code>$E7</code> - Return from Text Macro</dt>
				<dd><p>
					This acts like an RTS for the textbox system. Put this at the end of your text macro
					strings to tell the textbox system to jump back to where it was at before calling the
					previous text macro. Unless you know what you're doing, you should end text macros with this command,
					otherwise the texbox system won't know where the end of the string is.
				</p></dd>
			</dl>

			<p>
				And with that another section of this ridiculously long manual is done and you’re finally able to
				write your own dialogues. WOO HOO!
			</p>

			<h4 id="text-macros" class="text-center">Text Macros</h4>
			<p>
			</p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="advanced-functionality" class="text-center">4. Advanced Functionality</h2>
			<p>
				This section is intended for advanced users only. That is, people who want to write custom resources (sprites, blocks, patches etc.) that make use of the patch or who want to use the patch in some complex ways. In other words: If you aren't a coder, you can most likely just ignore this entire section.
			</p>
			
			<h3 class="text-center">MessageASM</h3>

			<p>
				Starting with V1.3, this patch enables you to run custom code on a per message basis, like how UberASM allows you to have
				custom code run on a per level/submap/gamemode/etc. basis. MessageASM code is run every frame once the current VWF mode is
				02 or more and can be used to do things that the <code>$F1</code> command cannot do. It also allows you to tie message
				specific code to this patch instead of through UberASM code or some other outside resource. MessageASM can be used to do things
				like create custom menus, display character portraits, auto-display the name of whoever is speaking at the start of each text box,
				run scripts that move/animate sprites, etc.

			</p><p>
				<h6>Some useful VWF RAM addresses to use with your MessageASM code:</h6>

				</p><p>
				<code>!skipmessageflag</code> = Is set to 00 when a message has been skipped with the Start button. Is a non-zero value otherwise.

				</p><p>
				<code>!initialskipmessageflag</code> = Is non-zero if the current message is allowed to be skipped.

				</p><p>
				<code>!l3priorityflag</code> = Contains a backup of the layer 3 priority bit before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!l3transparencyflag</code> = Contains a backup of the layer 3 color math settings before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!l3mainscreenflag</code> = Contains a backup of the layer 3 mainscreen setting before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!l3subscreenflag</code> = Contains a backup of the layer 3 subscreen setting before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!isnotatstartoftext</code> = Is set to 00 when a text box is cleared, 01 when text parsing begins. Use this to initialize code related to individual text boxes.
			</p>

			<h3 id="display-messages" class="text-center">Display Messages From Custom Code</h3>
			<p>
				So now to actually use my patch and display some text on the screen.
				Remember this window from applying the patch to your ROM?
				<img class="d-block m-1 my-2" src="screenshots/console-1.png" alt="Screenshot" width="979" height="512" />
				This is the first time it actually plays a role. Now if you’re not familiar with ASM at all or don’t
				plan on using this patch in your own patches, custom sprites or custom blocks then this won’t be
				very interesting for you. For everyone else here is the general procedure of how to start a dialogue
				ingame using this patch:
				<ol>
					<li>
						Write the number of the message to display to the Message register. This is a 2-Byte address.
						So let’s say you’d want to display message <code>$002D</code>.
						Using the example from the screenshot this would go somewhat like this:
						<pre><code>rep #$20		; Set A to be 16-bit.
lda.w #$002D		;\ Message number to load.
sta.l $702001		;/
sep #$20		; Set A to be 8-bit.</code></pre>
					</li>
					<li>
						Write <code>$01</code> to the VWF State register. One thing is very important here: Before you do this
						you’ll have to check if a dialogue is already being processed. Why? Well, if you don’t this might
						lead to unexpected results, like Layer 3 glitiching up for example. If the VWF State register equals
						<code>$00</code> then no dialogue is being processed. This leads to the following code:
						<pre><code>lda.l $702000		;\ Is a VWF Message being displayed?
bne .SkipDialogue	;/ If so, branch.
lda #$01		;\ Otherwise, initialize the new VWF Message.
sta.l $702000		;/
.SkipDialogue</code></pre>
					</li>
				</ol>
				<ul>
					<li>
						Alternatively, the patch contains a routine that will do most of the above for you in addition to forcing
						the previous message to close. All you need to do is load the message number. To call this routine, do the
						following, using the above screenshot and previous example as an example.
						<pre><code>rep #$20		; Set A to be 16-bit.
lda.w #$002D		; Message number to load.
jsl.l $90F079		; Address of the "DisplayAMessage" routine.
sep #$20		; Set A to be 8-bit.</code></pre>
					</li>
				</ul>
			</p>

			<p>
				Whenever a dialogue is currently active, the Status Bar and the level’s Layer 3 are hidden. They’ll
				return at the end of the dialogue. I still recommend not using dialogues in Layer 3 levels.
				Alright. Let’s move on. By now you’re probably wondering what that number we have written to the
				Message register corresponds to. Well, open the file <code>vwfmessagepointers.asm</code> and find out.
				You’ll see something like this:
				<pre><code><table class="border-0" style="line-height:19px;"><tbody><tr><td>dl Message0000,	</td><td>Message0001,	</td><td>Message0002,	</td><td>Message0003</td></tr>
<tr><td>dl Message0004,	</td><td>Message0005,	</td><td>Message0006,	</td><td>Message0007</td></tr>
<tr><td>dl Message0008,	</td><td>Message0009,	</td><td>Message000A,	</td><td>Message000B</td></tr>
<tr><td>dl Message000C,	</td><td>Message000D,	</td><td>Message000E,	</td><td>Message000F</td></tr>
<tr><td>dl Message0010,	</td><td>Message0011,	</td><td>Message0012,	</td><td>Message0013</td></tr>
</tbody></table>[...]</code></pre>
				This is the table that points to the text for each dialogue. By now you should know how tables work:
				A "dl" at the beginning, a space after that and a bunch of labels seperated by commas. In this case the
				table works like this: If the Message register is $0000, use the first address in this table. If the
				Message register is $0001, use the second address in this table. Etc.
			</p>

			<p>
				As you can see I’ve always used the required value of the Message register as the name of the according
				label. This is not required, but it’s recommended for orientation. Basically you can put any
				24-Bit-Address here, even RAM addresses, which can be useful if you’re using this in your own patches. Let’s
				have a table with a few valid examples:
				<pre><code><table class="border-0" style="line-height:19px;"><tbody><tr><td>dl Message0000,	</td><td>$7F0000,	</td><td>Message0002,	</td><td>Message0003</td></tr>
<tr><td>dl $05A5D9,	</td><td>Message0005,	</td><td>Message0006,	</td><td>Randomname1</td></tr>
<tr><td>dl Message0008,	</td><td>Message0009,	</td><td>Message000A,	</td><td>Randomname2</td></tr>
<tr><td>dl $268000,	</td><td>Message000D,	</td><td>Message000E,	</td><td>Message000F</td></tr>
<tr><td>dl MessageABCD,	</td><td>Message0011,	</td><td>Message0012,	</td><td>Message0000</td></tr></tbody></table>[...]</code></pre>
				By default there are labels for 256 messages in this table. In theory you can use up to 10922 different
				messages with this patch, but since SNES ROMs are rather limited in file space it’s unlikely you’ll ever get
				to use that many, especially since my patch doesn’t compress text in any way. It’s not very likely that you’ll
				ever get to have that many messages in your game, anyways. If 256 messages aren’t enough for you, simply add
				more labels at the end of this file. It’s as simple as that. By now you might be wondering "OK OK, but where
				the hell do I put the text now?". Let’s head to the next point and clear this question.
			</p>

			<p>
				Open <code>vwfmessages.asm</code>. As you can see labels for each label in the table are already in here.
				Most of them are ununsed and can be used by yourself. If you chose to replace SMW’s original messages
				by this patch in section 2 then the comments at the end of each label also tell you which original
				message the according labels are replacing. <code>Message0009:</code> replaces SMW’s original message 004-2 for
				example. To edit a dialogue simply put text under the according label. To add new ones simply paste
				them at the end of the file, but ABOVE <code>%textend()</code>. This is important to prevent glitches.
				After we’re done with this we can finally get to actually write messages. YAY!
			</p>

			<h3 id="shared-routines" class="text-center">Shared Routines</h3>

			<p>
				This file, added in V1.3, is meant to contain custom code related to VWF messages such as MessageASM code. By
				default, this file contains various routines that give your messages extra functionality. Here is what these
				routines do:
			</p>
				<dt id="vwfcode-displayamessage"><code>DisplayAMessage</code></dt>
				<p>
					This will cause a new VWF message to display based on whatever 16-bit value was stored in A prior to calling. If
					a VWF message is already active, then the previous message will be forced to close to prevent glitches. This routine
					is meant to be called from within any custom code, whether that be MessageASM, the <code>$F1</code> command code,
					UberASM code or a custom sprite/patch/block/etc.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>REP #$20
LDA.w #MessageNumber
JSL DisplayAMessage</code></pre>
				</p>
				<dt id="vwfcode-changevwftextptr"><code>ChangeVWFTextPtr</code></dt>
				<p>
					This lets you change the VWF text pointer to change the text that will be displayed next frame. Call this routine from
					within MessageASM or <code>$F1</code> command code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>LDA.b #TextPointer
LDX.b #TextPointer>>8
LDY.b #TextPointer>>16
JML ChangeVWFTextPtr</code></pre>

					... where "TextPointer" is any label above valid text data.
				</p>

				<dt id="vwfcode-changemessageasmptr"><code>ChangeMessageASMPtr</code></dt>
				<p>
					This lets you change the MessageASM pointer to change what code will run next frame. Call this routine from
					within MessageASM or <code>$F1</code> command code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>LDA.b #ASMPointer
LDX.b #ASMPointer>>8
LDY.b #ASMPointer>>16
JML ChangeMessageASMPtr</code></pre>

					... where "ASMPointer" is any label above valid code.
				</p>

				<dt id="vwfcode-changemessageskipptr"><code>ChangeMessageSkipPtr</code></dt>
				<p>
					This lets you change the Message skip pointer to change where the text box should jump when start is pressed. Call this routine from
					within MessageASM or <code>$F1</code> command code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>LDA.b #TextPointer
LDX.b #TextPointer>>8
LDY.b #TextPointer>>16
JML ChangeMessageSkipPtr</code></pre>

					... where "TextPointer" is any label above valid text data.
				</p>

				<dt id="vwfcode-checkifmessagewasskipped"><code>CheckIfMessageWasSkipped</code></dt>
				<p>
					This allows you to detect if the player has pressed start to skip a message. This can allow you to reset <code>!skipmessageflag</code>
					to a non-zero value if you want a message to have multiple skip functions in the same message. Note that this check only works if a message
					was initially set to allow message skipping. If you want to toggle whether this routine works or not, store 00 to <code>!initialskipmessageflag</code>
					to disable and any non-zero value to enable. Call this routine from within MessageASM code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>JSL CheckIfMessageWasSkipped
BCS .MessageWasSkipped
.MessageWasNotSkipped</code></pre>

					... where "TextPointer" is any label above valid text data.
				</p>

				<dt id="vwfcode-buffervwftext"><code>BufferVWFText</code></dt>
				<p>
					This routine allows you to buffer a string of text/commands to RAM, allowing for easier and more flexible variable text display.
					Buffered strings must end with a <code>$E7</code> command to signify the end of a string. Buffered text can be displayed using text macros
					0000-000F or by setting <code>$03</code> to a non-zero value before calling this routine to hijack the current text pointer. If you do
					the latter, the buffered text will get a <code>$FB</code> command automatically added to the end of it, so that the text pointer will
					know where to jump back to. You should only call this routine from within MessageASM code, and only when at the start of an empty text box.
					Otherwise, you run the risk of issues with word wrapping and/or centered text. In addition, if you call this routine consecuatively, be sure
					to call <code>BufferVWFText_Main</code> first, then call <code>BufferVWFText_Entry2</code> for each subsequent call.
				</p><p>
					<h6>Entry code 1:</h6>
					<pre><code>;(Some code that sets X to a multiple of 2)
REP #$30
STZ $03
LDY.w #.StringTable>>16
LDA.l .StringTable,x
JML BufferVWFText_Main</code>

<h6>Entry code 2:</h6>
<code>;(Some code that sets X to a multiple of 2)
REP #$30
SEC
ROL $03
LDA.w #TextPointer
STA $04
LDA.w #TextPointer>>8
STA $05
LDY.w #.StringTable>>16
LDA.l .StringTable,x
JML BufferVWFText_Main

.StringTable
dw .String1,.String2,.String3 ...

.String1
db "Insert any valid text/commands here",$E7</code></pre>

					... where "TextPointer" is any label above valid text data.

				</p><p>
					Warning: If used in MessageASM code, be careful with when you call this routine and hijack the text pointer. If text parsing is delayed
					in some way and you call this routine multiple times, then your message could end up in an infinite loop!
				</p>

				<dt id="vwfcode-togglemessageasmptr"><code>ToggleMessageASMPtr</code></dt>
				<p>
					This allows you to toggle whether the current MessageASM routine should run. Call this routine within MessageASM code,
					<code>$F1</code> command code or directly with the <code>$F1</code> command.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>JSL ToggleMessageASMPtr_XXXX</code></pre>

					... where "XXXX" is either "Enable" or "Disable".
				</p>

				<dt id="vwfcode-closemessageandgotooverworld"><code>CloseMessageAndGoToOverworld</code></dt>
				<p>
					This allows you to make the current message close and fade out to the overworld. Call this routine within MessageASM code,
					<code>$F1</code> command code or directly with the <code>$F1</code> command.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>JSL CloseMessageAndGoToOverworld_XXXX</code></pre>

					... where "XXXX" is either "NormalExit" or "SecretExit" or "StartPlusSelect" depending on what exit level behavior you want.
				</p><p>
					Note: If using Lunar Magic 3.00, then you can simply use the $EF command to teleport to the overworld via a secondary entrance.
				</p>

			<h3 class="text-center">Custom Patches</h3>

			<p>
				Everything left now is to explain how to use the functions of this patch in your own patches.
				For this we need the screenshot from Asar once again.
				<img class="d-block m-1 my-2" src="screenshots/console-1.png" alt="Screenshot" width="979" height="512" />
			</p>

			<dl>
				<dt>VWF Creation Routine</dt>
				<dd><p>
					This routine creates VWF text graphics in RAM when JSLed to. You use SMW’s Scratch RAM to
					set it up.
					<table class="kv-map"><tbody>
						<tr><th><code>$00</code>-<code>$02</code></th><td>Text source address.</td></tr>
						<tr><th><code>$03</code>-<code>$05</code></th><td>Font graphics address (2BPP GB format).</td></tr>
						<tr><th><code>$06</code>-<code>$08</code></th><td>Font width table address.</td></tr>
						<tr><th><code>$09</code>-<code>$0B</code></th><td>Destination address.</td></tr>
						<tr><th><code>$0C</code>-<code>$0D</code></th><td>Number of characters.</td></tr>
						<tr><th><code>$0E</code></th><td>Pixel to start on.</td></tr>
						<tr><th><code>$0F</code></th><td>Set to $01 if the destination address doesn’t contain VWF text graphics yet.</td></tr>
					</tbody></table>
					Note that the special characters explained before are not actually used by this routine.
				</p></dd>
				<dt>Pattern Addition Routine</dt>
				<dd><p>
					This routine adds a background pattern to VWF text previously created in RAM when
					JSLed to. This assumes that the text only uses the third and fourth colors of the palette
					and that the background pattern graphic only uses the second color. Otherwise the result
					may not turn out as expected. You use SMW’s Scratch RAM to set it up.
					<table class="kv-map"><tbody>
						<tr><th><code>$00</code>-<code>$02</code></th><td>Pattern graphic source address (2BPP GB format).</td></tr>
						<tr><th><code>$03</code>-<code>$05</code></th><td>VWF text graphics address = destination address (2BPP GB format).</td></tr>
						<tr><th><code>$06</code></th><td>Number of tiles.</td></tr>
					</tbody></table>
				</p></dd>
				<dt>BG GFX register</dt>
				<dd><p>
					Which graphic to use for the background pattern of the text box.
				</p></dd>
				<dt>BG Color register</dt>
				<dd><p>
					Which color to use for the background of the text box in SNES RGB. This is a 2-Byte address.
				</p></dd>
				<dt>Frame GFX register</dt>
				<dd><p>
					Which set of graphics to use for the text box frame.
				</p></dd>
				<dt>Abort Dialogue Processing register</dt>
				<dd><p>
					Flag used to force the VWF message to close.
				</p></dd>
				<dt>DisplayAMessage routine</dt>
				<dd><p>
					This routine allows you to display a new VWF Message and force the current message to close
					if one is already displaying. Before JSLing to this routine, use <code>REP #$20</code> to set A
					to be 16-bit, then load the 16-bit message number you want into A.
				</p></dd>
			</dl>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="problem-solving" class="text-center">5. Problem Solving</h2>
			<p>
				In this section I’ll go over a few problems that may or may not be more complicated than most of the
				other stuff here so far.
			</p>
			
			<h4 class="text-center">Migration</h4>
			<p>
				When I originally started refactoring this patch to make use of Asar 1.90 variadic macros, backwards-compatibility
				with older patch versions was still one of my main goals. I wanted to make it easy for all version 1.2 (or earlier) users of the patch
				to migrate to version 1.3. Over time, as I kept adding more and more improvements to 1.3, this goal kept moving further and further out of reach.
			</p>
			
			<p>
				Technically speaking, version 1.3 is binary-compatible with messages from version 1.2, but it just includes so many changes to its general format
				that writing a straight-forward migration guide became too complex of a task for me. Therefore, I made the decision to declare version 1.3
				as incompatible with version 1.2.
			</p>
			
			<p>
				So what does this mean for you? Well, if you're making a new hack from scratch or working on a hack that has never used VWF Dialogues before, it doesn't really matter.
				Just use the newest version of the patch that's available. However, if you're working on a hack that's already using an older version of VWF Dialogues, you now basically have
				two options. Either you stick with the old patch version (and whatever bugs it might have), or you manually port over everything from the old to the new version, which basically
				involves recreating all your message boxes and resources in the format of the new version.
			</p>
			
			<p>
				As I said, there's unfortunately no easy way of migrating to newer patch versions. However, on the positive side, version 1.3 of the patch was designed in a way that makes it a lot easier
				to extend in the future without breaking compatibility, so once you go through the effort of migrating, you'll hopefully never have to do it again to that degree for newer versions.
			</p>

			<h4 class="text-center">Dialogues Without Freezing Sprites</h4>
			<p>
				So you’re planning to use a dialogue in your game without freezing sprites? Dialogues like that can
				be found in various RPGs as system messages. First of all there are certain things you have to note
				when using this option:
			</p>
			<ul>
				<li>
					Currently the patch doesn’t contain any hijack to end a dialogue when touching a goal tape.
				</li>
			</ul>
			<p>
				Well, if you plan to use this feature anyways you may notice that it can be pretty slow in certain
				situations, so here are a few tips to help you speed it up:
			</p>
			<ul>
				<li>
					Use the SA-1 Enhancement Chip.
					<a tabindex="0" role="button" data-toggle="collapse" data-target="#video-sa1" aria-expanded="false" aria-controls="video-sa1">Case in point.</a>
					<div id="video-sa1" class="collapse mt-3">
						<iframe class="video" style="height:640px;" src="https://www.youtube.com/embed/hGmuaMoVO9I?rel=0&amp;start=71" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
					</div>
				</li>
				<li>
					If you can’t use the SA-1 chip for whatever reason, then the following should provide a useable alternative:
					<ul>
						<li>
							Use the newest version of Lunar Magic and activate the FastROM patch and FastROM addressing. This
							speeds up the game by a whole lot. Enough to make use of this feature reasonable.
						</li>
						<li>
							Use slower text speeds. The slower the text speed, the more frames between each letter. The
							more frames between each letter, the less the player will notice any slowdown.
						</li>
						<li>
							Show only small parts of text at the same time. In Secret of Mana for example system messages
							always consisted of only one line of text. If you do it like that and put waits at the end of
							each line, then the "lag phases" will be a lot shorter and won’t be noticed that much.
						</li>
						<li>
							Avoid putting lots of sprites on the screen, especially big ones. Pretty much all of the slow downs
							are caused by sprites. Two or three small sprites on a screen should be fine, but any
							additional sprite will most likely slow it down.
						</li>
						<li>
							Use Text Box Creation Style 0 (=No Text Box). This will skip the Pattern Addition Routine and
							therefore save a good amount of cycles.
						</li>
					</ul>
				</li>
			</ul>

			<h4 class="text-center">Bank Limits</h4>
			<p>
				If you make your message list long enough (around 200 messages), it is possible that you’ll get an
				error like this:
				<img class="d-block m-1 my-2" src="screenshots/console-2.png" alt="Screenshot" width="979" height="512" />
				As Asar states, this is caused by crossing a bank border. More specifically, your message data has gotten too
				long to fit inside a single bank. There is a simple solution to this problem: Just add <code>%nextbank(freedata)</code> above the last message in the file,
				and the errors should disappear (until you add around two hundred more messages). If they don’t, keep moving the
				<code>%nextbank(freedata)</code> up (always make sure it’s just above a message) until they do.
			</p>

			<p>
				Another important thing to note: It’s impossible to split the pointer table file
				"vwfmessagepointers.asm" into multiple banks. Originally, I wanted to add bank border checking to this file,
				but I figured that even without bank border checking, you can still get up to
				$2AAA (that’s 10922) pointers into a single bank, and let’s be serious here: It’s rather unlikely for a single SNES game
				to ever contain this many messages. Therefore this one limitation shouldn’t really matter.
			</p>
			<p>
				Alternatively, you can attempt to optimize your text so that it takes up less space. Comment out messages you're not using
				anymore. Rephrase your text to say the same thing in fewer characters. Convert key terms, names, frequently used phrases, etc.
				into text macros. Optimize your MessageASM/<code>$F1</code> command code. Do whatever you can to make your text as small as possible
				without compromising any functionality.
			</p>

			<h4 class="text-center">Conflicts With HDMA Effects</h4>
			<p>
				This patch makes use of DMA transfers. DMA transfers share their channels with HDMA. This means
				they will influence any HDMA effects that use the same channels. The DMA transfers in this patch all
				use channel 0 (%00000001). If you experience problems with an HDMA effect while displaying a
				dialogue box, just make sure not to use channel 0 for that effect. Read an HDMA tutorial for
				further information on this subject.
			</p>

			<h4 id="advanced-compatibility" class="text-center">Compatibility With Other Patches</h4>
			<p>
				The following patches are known to be compatible:
				<ul class="font-weight-bold">
					<li>All patches made by RPG Hacker</li>
					<li>Kaijyuu’s Super Status Bar</li>
				</ul>
				The following patches have a few compatibility quirks which can be easily worked around:
				<ul>
					<li class="font-weight-bold">Sprite Status Bar</li>
					<dd>
						The sprite status bar doesn’t disappear when a message box is opened,
						but you probaably shouldn’t be using both the Sprite Status Bar and
						the Layer 3 dialogue box in the same level anyway, since
						the Sprite Status Bar’s purpose is to allow full usage of the Layer 3,
						which the dialogue box completely hides while it’s shown.
					</dd>
				</ul>
				The following patches are known to be incompatible:
				<ul>
					<li class="font-weight-bold">SMB3 Status Bar</li>
					<dd>
						Causes graphical corruption and displays garbage.
					</dd>
					<li class="font-weight-bold">Minimalist Status Bar</li>
					<dd>
						Flashes the whole screen during dialogue transitions.
					</dd>
				</ul>
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="bugs" class="text-center">6. Known Bugs</h2>
			<p>
				<ul>
					<li>This patch has been known to cause freespace leaks. The current cause is unknown.</li>
					<li>Sometimes, when closing a dialogue, there’s a Flash of <code>0</code>s (FO0)
						when using level modes where Layer 3 isn’t on the Main-Screen, or the Main-Screen
						or Sub-Screen registers are updated in such a way that Layer 3 gets shown
						by another patch while this patch is busy restoring Layer 3.
					<br/>
						While this may sound easy to fix by applying <a href="https://smwc.me/1468216">Blind
						Devil’s patch</a>, it isn’t, because of the tilemap still containing the VWF Dialogues
						transparent tile, which is <code>$00</code>, because tile <code>$FC</code> can
						get overwritten by a characher tile in sufficiently long messages.</li>
				</ul>
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="plans" class="text-center">7. Planned Features</h2>
			<p>
				<small class="text-center my-2 d-block">
					LOL, I wrote this patch almost a gazillion years ago and none of this is likely
					going to happen anymore*. Sorry to disappoint you. :(<br/><br/>
					Sincerly, RPG Hacker<br/><br/>
					*At least by me. Luckily, the patch is now hosted on GitHub, and a bunch of people have already picked up right where I had left off. Thanks to them, the patch keeps evolving, even to this day!<br/>
					I'm thankful to every one of you! &lt;3
				</small>
				<ul>
					<li>Create a GUI application to make setting up the patch a lot easier for the user.</li>
					<li>Add a feature to the patch that allows the player to easily customise the text box ingame.</li>
					<li>Add a command to jump to a certain pixel inside the text box.</li>
					<li>Allow customising which button is used for advancing the dialogue.</li>
					<li>Implement a better alternative for the deprecated 16-Bit mode. Something that supports all kinds of languages, while keeping the text insertion size as small as possible for every one of them.</li>
					<li>Lots of optimizations.</li>
				</ul>
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="bug-reports" class="text-center">8. Bug Reports</h2>
			<p>
				Bugs or suggestions? Contact me on SMW Central, or (preferably) file an <a href="https://github.com/RPGHacker/SMW-Workspace/issues">issue</a> on GitHub!
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="history" class="text-center">9. History</h2>

			<dl>
			<dt><h5>Version 1.3 - <span data-date="2022-01-07">01/07/2022</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>Yoshifanatic</li>
						<li>RPG Hacker</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Completely reworked message format. Messages are now constructed via macros/defines instead of magic hex values. The patch now requires Asar 1.90 or higher.</li>
						<li>Fixed an oversight where various aspects of layer 3 (transparency, priority, main/subscreen status) were not being preserved.</li>
						<li>Added MessageASM functionality to allow one to run custom code on a per-message basis.</li>
						<li>Added the ability to modify the text pointer using the start button.</li>
						<li>Added a text macro system, allowing one to define strings of text/commands to be called at any time in a message.</li>
						<li>Added an extra step to message initialization that initializes all the VWF variables on message load, not just on title screen load.</li>
						<li>Added command byte <code>$EB</code> that forces a textbox to freeze until something modifies the text pointer.</li>
						<li>Added command bytes <code>$E8</code> and <code>$E7</code> for the text macro system and that act like a JSR and RTS to the textbox system, respectively.</li>
						<li>Added several useful routines that can be called from within messages, such as a text buffering routine.</li>
						<li>Made it so that the textbox will be forced to close when the screen fades out. The fadeout will also be delayed until the textbox closes.</li>
						<li>Added some functionality that enables the textbox to close if another message is being set to display</li>
						<li>Changed the hijack location for initializing the VWF RAM on the title screen from $0086E2 to $0096B4, because the former location was very questionable.</li>
						<li>Fixed certain incompatibilities with Vitor Vilela's SA-1 Pack Patch v1.30 and up.</li>
						<li>Adjusted the <code>$EF</code> command to work with secondary entrances $0200-$1FFF, levels using Lunar Magic 3.00 custom level dimensions, and layer 2 horizontal levels.</li>
						<li>Added a RAM flag that indicates that the text box has just been cleared.</li>
						<li>Added placeholder text to messages with no content, which makes it easier for players to report them to hack creators.</li>
						<li>Cut RAM usage in half by optimizing how the text tiles are buffered.</li>
						<li>Several small code optimizations.</li>
						<li>Overall patch cleanup - made some places in the patch more readable and more intuitive, using newer Asar features.</li>
						<li>Fixed several incompatibilities - patch should no work on newest versions of Higan/BSNES, as well as on sd2snes.</li>
						<li>Changed the way the "freeze sprites" setting works. As a result, the smoke clouds in Yoshi's House can no longer glitch while a dialog box is open.</li>
						<li>When specifying &quot;wait x frames&quot; for the auto wait header setting, the patch will now wait 1 frame less, giving the setting an effective range of $01 to $FE instead of $02 to $FF.</li>
						<li>The "display message" command now has an option to play the box creation animation again (which will also reload certain text box settings).</li>
						<li>Pointer tables for messages are now generated automatically.</li>
						<li>Hex and decimal number functions no longer require 0123456789ABCDEF to be the first characters in the font, but rather use character mapping table files to determine the correct characters to use.</li>
						<li>Character mapping table now supports a bunch of special characters, as well as Japanese (both available from Asar 2.0 onwards).</li>
						<li>Added new character offset command, which allows applying an offset value to every single character being rendered. Useful for creating fonts with a custom number of characters.</li>
						<li>Fixed: When running in 16-bit mode and displaying a 16-bit decimal number, the thousands digit didn't work and displayed a random character instead.</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.2 - <span data-date="2018-05-03">05/03/2018</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>ExE Boss</li>
						<li>RPG Hacker</li>
						<li>randomdude999</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Merged changes from the SA-1 converted version.</li>
						<li>Converted to a hybrid patch.</li>
						<li>Updated code style to match the rest of RPG Hacker’s patches.</li>
						<li>Updated the Readme to look good.</li>
						<li>Fixed a few things in the Readme and updated some of the outdated information.</li>
						<li>Fixed and improved the Readme and renamed it to manual.</li>
						<li>Fixed a typo in <code>vwfmessagepointers.asm</code>.</li>
						<li>Fixed the broken option selection cursor.</li>
						<li>Fixed issue when using <code>$F4</code> to display character <code>$FF</code>.</li>
						<li>Added a RAM flag to allow closing the dialogue mid-message.</li>
						<li>The SRAM expansion patch won’t accidentally contract the SRAM size.</li>
						<li>Added a python script for generating a character width table.</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.01 - <span data-date="2014-07-06">07/06/2014</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>Vitor Vilela</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Fixed palette issues with accurate emulators</li>
						<li>Changed the channel used in DMA transfers to 0.</li>
						<li>Fixed cursor sometimes not disappearing when moving.</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.0B - <span data-date="2012-01-16">01/16/2012</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>Alcaro</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Converted to Asar format</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.0 - <span data-date="2018-11-13">11/13/2010</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>RPG Hacker</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Initial Release</li>
					</ul>
				</p></dd>
			</dl>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>
	</body>
</html>
