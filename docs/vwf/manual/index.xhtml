<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
	<head>
		<meta charset="UTF-8"/>
		<title>VWF Dialogues Patch - Manual</title>
		<link rel="stylesheet" type="text/css" href="lib/bootstrap-4.0.0.min.css"/>
		<link rel="stylesheet" type="text/css" href="style.css"/>
		<script type="application/javascript" defer="true" src="lib/jquery-3.2.1.slim.min.js"></script>
		<script type="application/javascript" defer="true" src="lib/popper-1.12.9.min.js"></script>
		<script type="application/javascript" defer="true" src="lib/bootstrap-4.0.0.min.js"></script>
	</head>

	<!-- Body Begin -->

	<body id="top" class="position-relative" data-spy="scroll" data-target="#navbar" data-offset="0">
		<nav class="navbar navbar-expand-xl fixed-top navbar-light bg-light">
			<div class="container">
				<a class="navbar-brand mb-0 h1" href="#top">VWF Dialogues Patch</a>
				<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbar" aria-controls="navbar" aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<nav class="collapse navbar-collapse" id="navbar">
					<ul class="navbar-nav ml-auto">
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#intro">Introduction</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#start">Getting Started</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#basic-functionality">Basic Functionality</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#advanced-functionality">Advanced Functionality</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#problem-solving">Problem Solving</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#bugs">Known Bugs</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#plans">Planned Features</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#bug-reports">Bug Reports</a>
						</li>
						<li class="nav-item">
							<a class="nav-link text-nowrap" href="#history">History</a>
						</li>
					</ul>
				</nav>
			</div>
		</nav>

		<!-- Seperator Comment -->

		<section class="jumbotron">
			<div class="container">
				<h1 class="text-center mt-1 mb-2">VWF Dialogues Patch<br/><small>Â© 2010-2023 RPG Hacker</small></h1>

				<div class="row my-2 py-1 text-center ir-crisp">
					<div class="py-2 col col-xl-3 offset-xl-1"><img src="screenshots/screen-5.png" alt="Screenshot"/></div>
					<div class="py-2 col col-xl-4"><img src="screenshots/screen-4.png" alt="Screenshot"/></div>
					<div class="py-2 col col-xl-3"><img src="screenshots/screen-9.png" alt="Screenshot"/></div>
				</div>

				<div class="text-center mb-3">
					<div class="btn-group">
						<button class="btn btn-primary" data-toggle="collapse" data-target="#video1" aria-expanded="false" aria-controls="video1">
							Video 1
						</button>
						<button class="btn btn-primary" data-toggle="collapse" data-target="#video2" aria-expanded="false" aria-controls="video2">
							Video 2
						</button>
					</div>
					<div class="row">
						<div class="col-12 col-md-6 mt-3">
							<div id="video1" class="collapse nobefore">
								<iframe class="video" src="https://www.youtube.com/embed/wEWhCg-UCm0?rel=0" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
							</div>
						</div>
						<div class="col-12 col-md-6 mt-3">
							<div id="video2" class="collapse nobefore">
								<iframe class="video" src="https://www.youtube.com/embed/M2glDLSeITo?rel=0" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
							</div>
						</div>
					</div>
				</div>

				<h3 id="index">Table of Contents</h3>
				<ol>
					<li><a href="#intro">Introduction</a></li>
					<li><a href="#start">Getting Started</a></li>
					<li><a href="#basic-functionality">Basic Functionality</a><ul>
						<details><summary><a href="#resources">Resources (Graphics, Palettes, Fonts...)</a></summary>
							<ul>
								<li><a href="#resources-text-box-bgs">Text Box Backgrounds</a></li>
								<li><a href="#resources-text-box-frames">Text Box Frames</a></li>
								<li><a href="#resources-fonts">Fonts</a></li>
								<li><a href="#resources-message-files">Message Files</a></li>
							</ul></details>
						<li><a href="#message-format">Message Format</a></li>
						<details>
							<summary><a href="#header-settings">Header Settings</a></summary><ul>
							
								<details><summary><a href="#header-settings-text-box-properties">Text Box Properties</a></summary><ul>									
									<li><a href="#header-settings-vwf_x_pos"><code>vwf_x_pos()</code></a></li>
									<li><a href="#header-settings-vwf_y_pos"><code>vwf_y_pos()</code></a></li>
									<li><a href="#header-settings-vwf_width"><code>vwf_width()</code></a></li>
									<li><a href="#header-settings-vwf_height"><code>vwf_height()</code></a></li>
									
									<li><a href="#header-settings-vwf_box_animation"><code>vwf_box_animation()</code></a></li>									
								</ul></details>
								
								<details><summary><a href="#header-settings-text-properties">Text Properties</a></summary><ul>	
									<li><a href="#header-settings-vwf_font"><code>vwf_font()</code></a></li>
									<li><a href="#header-settings-vwf_text_palette"><code>vwf_text_palette()</code></a></li>
									<li><a href="#header-settings-vwf_text_color"><code>vwf_text_color()</code></a></li>
									<li><a href="#header-settings-vwf_outline_color"><code>vwf_outline_color()</code></a></li>
									
									<li><a href="#header-settings-vwf_space_width"><code>vwf_space_width()</code></a></li>
									<li><a href="#header-settings-vwf_text_margin"><code>vwf_text_margin()</code></a></li>
									<li><a href="#header-settings-vwf_text_alignment"><code>vwf_text_alignment()</code></a></li>
								</ul></details>
								
								<details><summary><a href="#header-settings-speed-and-flow-settings">Speed &amp; Flow Settings</a></summary><ul>
									<li><a href="#header-settings-vwf_freeze_game"><code>vwf_freeze_game()</code></a></li>
									<li><a href="#header-settings-vwf_text_speed"><code>vwf_text_speed()</code></a></li>
									<li><a href="#header-settings-vwf_auto_wait"><code>vwf_auto_wait()</code></a></li>
									<li><a href="#header-settings-vwf_button_speedup"><code>vwf_button_speedup()</code></a></li>
									<li><a href="#header-settings-vwf_enable_skipping"><code>vwf_enable_skipping()</code></a></li>
								</ul></details>
								
								<details><summary><a href="#header-settings-sound-effects">Sound Effects</a></summary><ul>
									<li><a href="#header-settings-vwf_enable_sfx"><code>vwf_enable_sfx()</code></a></li>
									<li><a href="#header-settings-vwf_letter_sound"><code>vwf_letter_sound()</code></a></li>
									<li><a href="#header-settings-vwf_wait_sound"><code>vwf_wait_sound()</code></a></li>
									<li><a href="#header-settings-vwf_cursor_sound"><code>vwf_cursor_sound()</code></a></li>
									<li><a href="#header-settings-vwf_continue_sound"><code>vwf_continue_sound()</code></a></li>
								</ul></details>
								
								<details><summary><a href="#header-settings-advanced">Advanced</a></summary><ul>
									<li><a href="#header-settings-vwf_enable_message_asm"><code>vwf_enable_message_asm()</code></a></li>
								</ul></details>
						</ul></details>
						<details>
							<summary><a href="#text-commands">Text Commands</a></summary><ul>
							
								<details><summary><a href="#text-commands-text-output">Text Output</a></summary><ul>
									<li><a href="#text-commands-vwf_text"><code>%vwf_text()</code></a></li>
									
									<li><a href="#text-commands-vwf_char"><code>%vwf_char()</code></a></li>
									<li><a href="#text-commands-vwf_char_at_address"><code>%vwf_char_at_address()</code></a></li>
									
									<li><a href="#text-commands-vwf_space"><code>%vwf_space()</code></a></li>
									<li><a href="#text-commands-vwf_non_breaking_space"><code>%vwf_non_breaking_space()</code></a></li>
									
									<li><a href="#text-commands-vwf_decimal"><code>%vwf_decimal()</code></a></li>
									<li><a href="#text-commands-vwf_hex"><code>%vwf_hex()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#text-commands-text-properties">Text Properties</a></summary><ul>
									<li><a href="#text-commands-vwf_set_font"><code>%vwf_set_font()</code></a></li>
									<li><a href="#text-commands-vwf_char_offset"><code>%vwf_char_offset()</code></a></li>
									
									<li><a href="#text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></a></li>
									<li><a href="#text-commands-vwf_set_text_palette"><code>%vwf_set_text_palette()</code></a></li>
									<li><a href="#text-commands-vwf_set_text_color"><code>%vwf_set_text_color()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#text-commands-text-flow">Text Flow</a></summary><ul>
									<li><a href="#text-commands-vwf_line_break"><code>%vwf_line_break()</code></a></li>
									
									<li><a href="#text-commands-vwf_clear"><code>%vwf_clear()</code></a></li>
									<li><a href="#text-commands-vwf_set_skip_location"><code>%vwf_set_skip_location()</code></a></li>
									<li><a href="#text-commands-vwf_close"><code>%vwf_close()</code></a></li>
									
									<li><a href="#text-commands-vwf_wait_for_a"><code>%vwf_wait_for_a()</code></a></li>
									<li><a href="#text-commands-vwf_wait_frames"><code>%vwf_wait_frames()</code></a></li>
									<li><a href="#text-commands-vwf_set_text_speed"><code>%vwf_set_text_speed()</code></a></li>
									
									<li><a href="#text-commands-vwf_freeze"><code>%vwf_freeze()</code></a></li>
									
									<li><a href="#text-commands-vwf_set_text_pointer"><code>%vwf_set_text_pointer()</code></a></li>
									<li><a href="#text-commands-vwf_display_message"><code>%vwf_display_message()</code></a></li>
									
									<li><a href="#text-commands-vwf_display_options"><code>%vwf_display_options()</code></a></li>
									<li><a href="#text-commands-vwf_set_option_location"><code>%vwf_set_option_location()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#text-commands-gameplay-modifiers">Gameplay Modifiers</a></summary><ul>
									<li><a href="#text-commands-vwf_play_bgm"><code>%vwf_play_bgm()</code></a></li>
									<li><a href="#text-commands-vwf_setup_teleport"><code>%vwf_setup_teleport()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#text-commands-text-macros">Text Macros</a></summary><ul>
									<li><a href="#text-commands-vwf_execute_text_macro"><code>%vwf_execute_text_macro()</code></a></li>
									<li><a href="#text-commands-vwf_execute_text_macro_by_indexed_group"><code>%vwf_execute_text_macro_by_indexed_group()</code></a></li>
									<li><a href="#text-commands-vwf_execute_buffered_text_macro"><code>%vwf_execute_buffered_text_macro()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#text-commands-advanced">Advanced</a></summary><ul>
									<li><a href="#text-commands-vwf_execute_subroutine"><code>%vwf_execute_subroutine()</code></a></li>
								</ul></details>
						</ul></details>
						<details>
							<summary><a href="#helper-functions">Helper Functions</a></summary><ul>
							
								<details><summary><a href="#helper-functions-colors">Colors</a></summary><ul>
									<li><a href="#helper-functions-rgb_15"><code>rgb_15()</code></a></li>
									<li><a href="#helper-functions-vwf_get_color_index_2bpp"><code>vwf_get_color_index_2bpp()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#helper-functions-text-commands">Text Commands</a></summary><ul>
									<li><a href="#helper-functions-vwf_wrap"><code>%vwf_wrap()</code></a></li>
								</ul></details>
							
								<details><summary><a href="#helper-functions-advanced">Advanced</a></summary><ul>
									<li><a href="#helper-functions-vwf_inline"><code>%vwf_inline()</code></a></li>
									<li><a href="#helper-functions-remap_ram"><code>remap_ram()</code></a></li>
								</ul></details>
							
						</ul></details>
						<details>
							<summary><a href="#text-macros">Text Macros</a></summary><ul>
								<li><a href="#regular-text-macros">Regular Text Macros</a></li>
								<li><a href="#text-macro-groups">Text Macro Groups</a></li>
								<li><a href="#buffered-text-macros">Buffered Text Macros</a></li>
							</ul></details>
					</ul></li>
					<li><a href="#advanced-functionality">Advanced Functionality</a><ul>
						<li><a href="#display-messages">Display Messages From Custom Code</a></li>
						<li><a href="#message-asm">MessageASM</a></li>
						<details>
							<summary><a href="#shared-routines">Shared Routines</a></summary><ul>
							<li><a href="#vwfcode-displayamessage">DisplayAMessage</a></li>
							<li><a href="#vwfcode-changevwftextptr">ChangeVWFTextPtr</a></li>
							<li><a href="#vwfcode-changemessageasmptr">ChangeMessageASMPtr</a></li>
							<li><a href="#vwfcode-changemessageskipptr">ChangeMessageSkipPtr</a></li>
							<li><a href="#vwfcode-checkifmessagewasskipped">CheckIfMessageWasSkipped</a></li>
							<li><a href="#vwfcode-buffervwftext">BufferVWFText</a></li>
							<li><a href="#vwfcode-togglemessageasmptr">ToggleMessageASMPtr</a></li>
							<li><a href="#vwfcode-closemessageandgotooverworld">CloseMessageAndGoToOverworld</a></li>
						</ul></details>
					</ul></li>
					<li><a href="#problem-solving">Problem Solving</a></li>
					<li><a href="#bugs">Known Bugs</a></li>
					<li><a href="#plans">Planned Features</a></li>
					<li><a href="#bug-reports">Bug Reports</a></li>
					<li><a href="#history">History</a></li>
				</ol>
			</div>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="intro" class="text-center">1. Introduction</h2>
			<p>
				Welcome to my VWF Dialogues Patch! Since you got here by yourself, you most likely
				already know what this patch does, but let me give you a general overview anyways.
			</p>

			<p>
				The aim of this patch is to give a useful alternative to SMWâs native text boxes.
				Unlike Romi's VWF Cutscene Tool (which is great, but has very specific use cases only), this patch was designed around easy
				event creation, easy customization and compatibility with all kinds of languages. The cost
				of this is that its useage is slightly more advanced and requires more knowledge. However, as long as you read this manual carefully and are somewhat familiar with
				custom sprites/custom blocks and Asar patches, you should be fine.
			</p>

			<p>
				Iâve included a single custom block that utilizes this patch. Originally, I wanted to include more blocks and also
				a few custom sprites, but I figured that any custom block or custom sprite hosted on SMW Central that
				displays a native SMW message box should already be compatible with the patch as long as you enable the SMW message box hijack (see
				<a href="#start">section 2</a>). The one block I did include gives a general idea on how to address this patch within your own code.
				It primarily serves as a sample for people who want to write custom code that interfaces with the patch.
			</p>
				
			<p>
				In addition to this, Iâve included a few alternative fonts in case you donât like the default one. Though keep in mind that the
				default font features the largest (non-Japanese) character set. If youâre making a hack in any language that isn't English
				and features any special characters that are not yet in the default font, you will have to draw and add the missing glyphs yourself.
			</p>

			<p>
				Be aware that by default, this patch applies some modifications to your ROM that seem to be unrelated to the patch itself at first
				and might have unintended side effects. For example: It automatically expands
				the ROM's SRAM size to 128 KB since it requires roughly around 20 KB of working RAM that normally aren't available in SMW.
				For all of those cases, there's usually config options that can be used to disable the respective modifications if desired.
			</p>

			<p>
				Anyways, letâs get started with the first steps of setting up the patch.
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="start" class="text-center">2. Getting Started</h2>
			<p>
				In order to make use of this patch, you'll need to have downloaded <code>Asar v1.90</code> or newer. Older versions of Asar
				won't work, as the patch was designed specifically around newer Asar features for an improved user experience.
				As for the patch itself, the very first thing youâll want to do is to take the entire <code>vwf_dialogues</code> folder
				and copy it over to your hackâs local <code>patches</code> directory so that you can make modifications to it as needed. If you only
				want to see the patch in action, without configuring anything or adding custom text, you may go ahead and patch <code>vwf_dialogues.asm</code>
				to your ROM right now. Otherwise, keep reading.
			</p>

			<p>
				The patch is structured in a way where all data that is meant to be editable by end users is stored inside the <code>data</code> subdirectory.
				The most important file here is called <code>vwfconfig.cfg</code> and it contains all the major settings for the patch. Open it up in a text editor
				of your choice to edit them. Pay special attention to all the comments in this file, as they explain what most of the options do. This manual
				will only explain some of the more important ones.
			</p>
			
			<p>
				The first options you will find are <code>!vwf_var_ram</code>, <code>!vwf_backup_ram</code> and <code>!vwf_gfx_ram</code> as well as
				<code>!vwf_var_ram_sa1</code>, <code>!vwf_backup_ram_sa1</code>, <code>!vwf_gfx_ram_sa1</code> and <code>!vwf_palette_backup_ram_sa1</code>
				respectively. The first section of variables is used only in non-SA-1 ROMs, with the second one only being used in SA-1 ROMs.
				These defines configure which areas of RAM VWF Dialogues will use as their working memory. As an average user, you most likely won't ever
				have to edit any of these. The default settings should work out of the box. Advanced users, who might need more control over their RAM,
				can make use of them, going by the comments on each define as a rough guide on what they need and how they're being used.
			</p>
			
			<p>
				The only thing worth noting is that without further modifications, a non-SA-1 SMW ROM doesn't provide the amount of free RAM VWF Dialogues need.
				For this reason, the patch uses SRAM as working memory by default. All of the non-SA-1 address defines mentioned above have their default values
				pointing to areas in SRAM. The patch automatically applies a SRAM expansion patch to make sure enough SRAM is available. This behavior is controlled
				via the <code>!vwf_patch_sram_expansion</code> setting. Advanced users can set it to <code>false</code> to disable SRAM expansion, but
				will have to use additional patches that provide alternative areas of free RAM. SA-1 ROMs are unaffected by all this, as the SA-1 chip contains
				its own large area of RAM, which in the case of SMW is more than enough for this patch to work with.
			</p>
			
			<p>
				Now for (occasionally not so) quick explanations on some of the more important settings in the <code>Patch Settings</code> section:
				<ul>
					<li><code>!vwf_bit_mode</code>: Setting it to <code>VWF_BitMode.8Bit</code> will make the patch operate in 8-bit mode, whereas
						setting it to <code>VWF_BitMode.16Bit</code> will make it operate in 16-bit mode. In 16-bit mode, every text character and
						ever text box command use two bytes instead of one, meaning higher free space consumption in the ROM. In this mode, any
						commands that affect the active font are ignored. Instead, the high byte of each character controls which font to use
						for that particular character. This mode was originally intended for complex languages like Japanese, but in practice, I don't
						know if it was ever actively used, and its increased free space requirements might not make it worth using. Therefore, you
						should consider this option deprecated. It will only remain in the patch until someone can come up with a better solution
						for these languages.</li>
					<li><code>!vwf_hijack_message_box</code>: When set to <code>true</code>, the patch hijacks SMW's original message boxes so
						that activating one will display a VWF Dialogue instead. Here's a few quick examples of how SMW message IDs map onto
						VWF message IDs (more on message IDs later):
						<table>
							<tr>
								<th>SMW Message ID</th>
								<th>VWF Dialogues Message ID</th>
							</tr>
							<tr>
								<td>000-1</td>
								<td>0000</td>
							</tr>
							<tr>
								<td>000-2</td>
								<td>0001</td>
							</tr>
							<tr>
								<td>001-1</td>
								<td>0002</td>
							</tr>
							<tr>
								<td>001-2</td>
								<td>0003</td>
							</tr>
							<tr>
								<td>...</td>
								<td>...</td>
							</tr>
							<tr>
								<td>007-1</td>
								<td>000E</td>
							</tr>
							<tr>
								<td>007-2</td>
								<td>000F</td>
							</tr>
							<tr>
								<td>...</td>
								<td>...</td>
							</tr>
							<tr>
								<td>00F-1</td>
								<td>001E</td>
							</tr>
							<tr>
								<td>00F-2</td>
								<td>001F</td>
							</tr>
							<tr>
								<td>...</td>
								<td>...</td>
							</tr>
							<tr>
								<td>13B-1</td>
								<td>00BE</td>
							</tr>
							<tr>
								<td>13B-2</td>
								<td>00BF</td>
							</tr>
						</table>
						When set to <code>false</code>, SMW message boxes and VWF Dialogues can coexist within the same ROM. In this case, you need VWF Dialogue compatible
						custom sprites or custom blocks in order to use them. One example of those would be wye's NPC sprites.
						</li>
					<li><code>!vwf_enable_short_aliases</code>: When set to <code>true</code>, the patch defines a number of short aliases for most text commands. For example, you
						may use <code>!str("Hello!")</code> or <code>!text("Hello!")</code> instead of <code>%vwf_text("Hello!")</code>, <code>!font($01)</code> instead of <code>%vwf_font($01)</code> or
						<code>!press_a</code> instead of <code>%vwf_wait_for_a()</code>. These short aliases are intended for convenience and to make VWF Dialogues easier to read in code.
						It's very unlikely that you'll ever need to set this to <code>false</code>. The only conceivable scenario would be when you include <code>vwf_dialogues.asm</code> from within another patch via an <code>incsrc</code>. In that case, disabling this feature might make sense to reduce the likelihood of naming conflicts occuring. Further details on available short aliases
						will be provided along with the documentation of each text command.</li>
				</ul>
			</p>
			
			<p>
				Settings in the <code>Default Settings</code> sections define the default values/behaviors of various patch functions.
				I won't explain them in detail here, because most are either self-explanatory or will become apparent once the respective
				functions they relate to are explained.
			</p>
			
			<p>
				The <code>Data Includes</code> section becomes relevant once you want to add new assets to the patch. That is: New fonts, new message files, new text box frames etc.
				New fonts and messages files are added within the <code>vwf_define_data()</code> macro, whereas the <code>vwf_define_frames()</code> macro lets you specify the properties
				of your text box frames (currently just the palettes). Once again, these settings should become more apparent when their respective functionality is explained.
			</p>

			<p>
				This covers all of the patch's basic setup. More advanced functionality will be explained in detail later on.
				Once you're done configuring <code>vwfconfig.cfg</code>, you may go ahead and use Asar to patch <code>vwf_dialogues.asm</code>
				to your ROM. If everything was set up correctly, Asar's output should look roughly like this:
				<img class="d-block m-1 my-2" src="screenshots/console-1.png" alt="Screenshot" width="1115" height="875" />
				If thatâs what you get, then the patch was applied successfully. Most of these outputs are just for debugging purposes.
				You can safely ignore them, unless you're modifying the patch itself or coding some advanced feature that makes use of it.
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="basic-functionality" class="text-center">3. Basic Functionality</h2>
			<p>
				In this section I'll explain all the functionality that is intended for average users of this patch. This includes setting up resources and writing actual message boxes.
			</p>

			<h3 id="resources" class="text-center">Resources (Graphics, Palettes, Fonts...)</h3>
			<p>
				VWF Dialogues are designed to be very customizable. This not only includes the dialogue text itself, but also the design of the text box containing it. It's possible to customize all text box frames and backgrounds, as well as all fonts, to your liking, or add new ones entirely. The patch can even switch between them at run-time (though for text box frames and backgrounds, this is only technically supported - no feature is currently provided that makes use of this possibility, so if you want it in your hack, you currently need to write custom code for it). In order to make the most out of these features, you'll have to understand the different types of resources the patch uses, all contained within the <cod>data</cod> folder. Here's a short summary:
			</p>
			
			<p>
				<ul>
					<li>Text boxes
						<ul>
							<li>Frame graphics</li>
							<li>Background graphics</li>
							<li>Frame color palettes</li>
							<li>Background color</li>
						</ul>
					</li>
					<li>Fonts
						<ul>
							<li>Glyph graphics</li>
							<li>Character width tables</li>
							<li>Character to glyph mapping tables</li>
						</ul>
					</li>
				</ul>
			</p>
			
			<p>
				Editing any of these graphics requires a tile editor that supports the <code>2BPP GB</code> graphics format. In theory, any such
				tile editor will do, but if you plan to edit (or create) fonts, I highly recommend using a recent version of <code>YY-CHR</code>.
				You'll want to be using at least <code>v0.99</code>, as older versions lack some features that make editing fonts practicable. For the
				purpose of this manual, I will assume you're using YY-CHR and will reference it where appropriate.
			</p>

			<h4 id="resources-text-box-bgs" class="text-center">Text Box Backgrounds</h4>
			<p>
				For starters, let's look at background graphics, which are by far the simplest graphics format. Open <code>data/gfx/vwfbgpatterns.bin</code> in 
				YY-CHR and set the graphics format to <code>2BPP GB</code>. After tweaking palettes a little, you should see something similiar to this:
				<img class="d-block m-1 my-2" src="screenshots/yychr-1.png" alt="Screenshot" width="634" height="481"/>
				Here's what you need to know about background graphics:
				<ul>
					<li>Each 8Ã8 tile represents one BG pattern. The tile is simply repeated horizontally and vertically to fill up the entire background of a text box.</li>
					<li>The file size of <code>vwfbgpatterns.bin</code> must be divisible by 16. That's exactly the size of one 8x8 tiles in 2BPP GB graphics format in YY-CHR.</li>
					<li>The default background color is defined via <code>!vwf_default_text_box_bg_color</code> in <code>data/vwfconfig.cfg</code>. Currently, to switch to a different BG color at run-time, custom code is needed.</li>
					<li>The default background pattern is defined via <code>!vwf_default_text_box_bg_pattern</code> in <code>data/vwfconfig.cfg</code>. A value of <code>$00</code> represents the first tile in <code>vwfbgpatterns.bin</code>, a value of <code>$01</code> the second tile and so forth. Currently, to switch to a different BG pattern at run-time, custom code is needed.</li>
					<li>You should only every use color <code>$01</code> of a palette for BG patterns (that is "the second color from left" in a typical 2BPP four-color palette).
						The reason for this is that colors <code>$02</code> and <code>$03</code> are reserved for fonts.</li>
				</ul>
				That's pretty much all there is to it. To add additional BG patterns to the patch, simply expand the size of <code>vwfbgpatterns.bin</code> by 16 bytes (you can use a hex editor for this) and then draw the new pattern into the newly added empty space in YY-CHR.
			</p>

			<h4 id="resources-text-box-frames" class="text-center">Text Box Frames</h4>
			<p>
				In order to edit text box frames, open up <code>data/gfx/vwfframes.bin</code> in YY-CHR and set the graphics format to <code>2BPP GB</code>.
				Tweak the palettes to your liking, and you should see something like this:
				<img class="d-block m-1 my-2" src="screenshots/yychr-2.png" alt="Screenshot" width="634" height="481"/>
				
			</p>
			
			<p>
				Here's a quick rundown of everything you need to know about text box frames:
				<ul>
					<li>Every 9 8x8 tiles in <code>vwfframes.bin</code> make up one text box style. Here is an explanation on how the different tiles of a style are placed to compose a text box:
						<img class="d-block m-1 my-2 ir-crisp" src="screenshots/frames-1.png" alt="Screenshot" width="588" height="355"/>
					</li>
					<li>The file size of <code>vwfframes.bin</code> must be divisible by 144. That's exactly the size of nine 8x8 tile in 2BPP GB graphics format in YY-CHR.</li>
					<li>The default text box frame is defined via <code>!vwf_default_text_box_frame</code> in <code>data/vwfconfig.cfg</code>. A value of <code>$00</code> represents the first nine tiles in <code>vwfframes.bin</code>, a value of <code>$01</code> the second nine tiles and so forth. Currently, to switch to a different text box frame at run-time, custom code is needed.</li>
					<li>The define <code>!vwf_frame_palette</code> in <code>data/vwfconfig.cfg</code> dictates which section of CGRAM text box frames use for their palette. To give you a better idea of what this means: This define controls which parts of the Lunar Magic palette get overwritten by the text box frame palette while a VWF text box is on screen. Usable values are <code>$00</code> to <code>$07</code>. This image illustrates how these values map onto the palette from Lunar Magic:					
						<img class="d-block m-1 my-2 ir-crisp" src="screenshots/lm-palette-1.png" alt="Screenshot" width="530" height="329"/>
					</li>
					<li>The palettes of text box frames are controlled via the <code>vwf_define_frames()</code> macro in <code>vwfconfig.cfg</code>. Here's quick example for the format:
					<pre><code>
macro vwf_define_frames()
	; Frame $00
	db %00000000,%00000000
	dw rgb_15(00, 00, 00), rgb_15(31, 31, 31), rgb_15(00, 00, 00)
	
	; Frame $01
	db %00000000,%00000000
	dw rgb_15(22, 18, 02), rgb_15(13, 07, 01), rgb_15(04, 02, 00)
	
	; ...
endmacro
</code></pre>
					Here, each pair of <code>db/dw</code> represents one text box frame (the order corresponding to the order of frames in <code>vwfframes.bin</code>). The first line with the <code>db</code> is reserved for future use and currently unused. Fill it with zeros. The second line defines which colors to write into slots <code>$01</code>, <code>$02</code> and <code>$03</code> of the palette defined by <code>!vwf_frame_palette</code>. In other words: This line controls the second, third and fourth color of that palette. You can use the <code>rgb_15()</code> macro to make defining colors a bit easier. The three arguments of this macro represent the <code>R</code>, <code>G</code> and <code>B</code> values of the color, each ranging from <code>0</code> to <code>31</code>, effectively giving you a 15-bit color palette range.
					</li>
				</ul>
				To add additional text box frames to the patch, simply expand the size of <code>vwfframes.bin</code> by 144 bytes (you can use a hex editor for this) and then draw the new text box frame tiles into the newly added empty space in YY-CHR. Add the palette for this new frame to the bottom of <code>vwf_define_frames()</code>.
			</p>

			<h4 id="resources-fonts" class="text-center">Fonts</h4>
			<p>
				Font are the most complex type of resource supported by the patch. It already comes pre-packaged with four of them ready to use (one with support for Japanese text).
				If you do want to make your own fonts, there's three different types of resource files you need to know about: A .bin file containing character glyph graphics, an .asm file
				containing the widths of each character, and a second .asm file containing character-to-glyph mappings. You can find all the pre-packaged fonts in <code>data/fonts</code>.
				Each folder here contains a <code>vwffont.bin</code> containing the graphics and a <code>vwffont.asm</code> containing the character widths. The only exception is the terra_j font,
				which contains multiple .bin files, because there isn't enough space in a single font to contain the entire Japanese character set. For all pre-packaged fonts, <code>data/fonts/vwftable.asm</code> can be used as the character-to-glyph mapping file. Here's a list of things to be aware of when working with fonts:
				<ul>
					<li>To edit the glyph graphics of a font, open the respective .bin file in YY-CHR, set the graphics format to <code>2BPP GB</code> and also set the pattern to <code>FC/NES x16</code>. After tweaking the palettes a little, you should se something like this:
					<img class="d-block m-1 my-2" src="screenshots/yychr-3.png" alt="Screenshot" width="634" height="481"/></li>
					<li>Each 16x16 tile here contains one character glyph.</li>
					<li>Only colors <code>$02</code> and <code>$03</code> of a palette may be used for the glyphs (that is, the third and fourth color of each palette). Color $01, as mentioned previously, is already reserved for the background pattern. Generally, you'll want to use color $02 for the letters and color $03 for their outlines or drop shadows.</li>
					<li>Each glyph should touch the left edge of its tile. This is important for the VWF text generator to work properly. (At least according to past me. I don't remember why that is, and I haven't checked the code to make sure this is actually still true. Whoopsies!)</li>
					<li>However, not the entire width of a glyph tile is actually rendered in a text box. Instead, this is where the character width table files come into a play. Open one up and you should see a format similar to this:
					<pre><code>;Char00to0F:
db $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$06,$06
;Char10to1F:
db $07,$07,$05,$07,$08,$06,$09,$08,$07,$07,$07,$07,$06,$07,$07,$07

;...
</code></pre>
					Each number here represents the pixel width of one glyph from the respective .bin file. The first number is for the first glyph in the .bin file, the second number for the second glyph and so forth. The patch will look up those numbers and use them to determine how many columns of each glyph tile should be rendered, thus creating its variable width text.</li>
					<li>If you don't want to create width tables manually, a Python helper script is included at <code>code/scripts/generate_widths.py</code> which attempts to generate them for you. Just drop your .bin file onto the script and you should get the width table .asm file as an output. A valid installation of Python 2.7 or Python 3.0 is required for this. Note that you might still have to manually touch up the width table a little bit. For example, I personally find it useful to give all digits in a font a unified width, which makes it easier to create clean layouts with them. You can also use the script to generate a fixed-width table by running it from the command line and passing <code>-f</code> as an argument. That will use the widest glyph from the font as the width of all characters.</li>
					<li>The character-to-glyph mapping file is what Asar uses to know which characters in a text command correspond to which glyph in a font .bin file. The format looks like this:
					<pre><code>'0' = $00
'1' = $01
'2' = $02
'3' = $03
'4' = $04
'5' = $05
'6' = $06
'7' = $07
'8' = $08
'9' = $09
'A' = $0A
'B' = $0B
'C' = $0C
'D' = $0D
'E' = $0E
'F' = $0F
'G' = $10
'H' = $11
'I' = $12
; ...
</code></pre>
					Given the mapping from the example above, the command <code>%vwf_text("ABC")</code> would render tiles <code>$0A</code>, <code>$0B</code> and <code>$0C</code> from the current font's .bin file to the text box. In Asar v1.90, only ASCII character mappings are supported, but starting with Asar v2.0, any single-codepoint Unicode characters can be mapped. That makes it possible to even use a mapping for Japanese text (this will likely require running in 16-bit mode). Example:
					<pre><code>'ã' = $0100
'ã' = $0101
'ã' = $0102
'ã' = $0103
'ã' = $0104
'ã' = $0105
'ã' = $0106
'ã' = $0107
'ã' = $0108
; ...
</code></pre>
The <code>vwftable.asm</code> file that is included by default already includes a conditional to automatically add mappings for Japanese characters when Asar v2.0 or newer is used. Note that at this point in time, the patch does not automatically switch mappings when you switch fonts. You need to do so automatically by using the <code>cleartable</code> and <code>incsrc</code> commands, like so:
					<pre><code>cleartable
incsrc "vwftable_for_my_font.asm"</code></pre>
					Having to do this can be avoided by making all your fonts compatible with the same mapping file.</li>
					<li>Each font can contain up to 256 glyphs (that's equal to four pages in YY-CHR with the settings mentioned above).</li>
					<li>Fonts with more than 256 glyphs can be simulated by just creating separate fonts containing 256 glyphs each. In that case, you might want to use 16-bit mode to access them more easily. This can be useful for languages with a large character set, like Japanese.</li>
					<li>To add a new font to the patch, create a new .bin file with the glyph graphics, a new .asm file with the width table and (if needed) a new .asm file with the character-to-glyph mapping. Then add the following line to the <code>vwf_define_data()</code> macro in <code>vwfconfig.cfg</code>:
					<pre><code>%vwf_add_font("data/fonts/som/vwffont.bin", "data/fonts/som/vwffont.asm", "data/fonts/vwftable.asm")</code></pre>
					Where the first argument is the graphics .bin file, the second argument is the width table .asm file, and the third argument is the character-to-glyph mapping .asm file. The order of <code>%vwf_add_font()</code> calls inside the <code>vwf_define_data()</code> macro determines the ID of each font. The first %vwf_add_font() will be font <code>$00</code>, the second %vwf_add_font() will be <code>$01</code> and so forth. It is crucial that the character-to-glyph mapping file contains at least valid mappings for the characters <code>0 1 2 3 4 5 6 7 8 9 A B C D E F</code> for that respective font, because the functionality of all number-related text functions depends on it.</li>
				</ul>
			</p>
			
			<h4 id="resources-message-files" class="text-center">Message Files</h4>
			<p>
				Message files are probably this patch's most important resource, as they contain its actual guts: the messages themselves. The patch comes pre-packaged with a single message file at <code>data/vwfmessages.asm</code>. It's unlikely you'll ever have to create a new one. For 99% of use cases, just editing the existing file will be sufficient. There's only a few potential scenarios that I can think of where creating additional message files might be useful or even required:
				<ul>
					<li>If your hack contains such a massive amount of text that it no longer fits into a single bank, you'll have to create additional message files and split your text between them.</li>
					<li>If you're working on a hack with multi-language support, it might make sense to put each language into its own message file so that translators can work on them simultaneously.</li>
				</ul>
				Anyways, for the few people who have legitimate reasons to create new message files, here's a brief explanation on them. Note that it only covers the format of message files themselves, not on the messages within them. See section <a href="#message-format">Message Format</a> for details on that.
				<ul>
					<li>To add a new message file to the patch, first create it, then add the following line to the <code>vwf_define_data()</code> macro in <code>vwfconfig.cfg</code>:
					<pre><code>%vwf_add_messages("data/vwfmessages.asm", "data/fonts/vwftable.asm")</code></pre>
					Where the first argument is the path to the message file itself and the second argument is the path to the default character-to-glyph mapping file to use for it (see section <a href="#resources-fonts">Fonts</a> for details).</li>
				</ul>
				That's really all there is to it.
			</p>

			<h3 id="message-format" class="text-center">Message Format</h3>
			<p>
				Adding new messages to this patch is as simple as adding the following lines to one of your message files (usually <code>data/vwfmessages.asm</code>):
				
				<pre><code>%vwf_message_start(0000)

	%vwf_header()
	
	; Message contents go here.

%vwf_message_end()</code></pre>
				
				The number passed to <code>%vwf_message_start()</code> is the ID of your message. This is what other patches/sprites/blocks use to tell this patch which message to display. It's a four-digit hexadecimal number and must be unique for every message. The easiest way to assure this is to just start from <code>0000</code> and increment the ID by 1 for every message you add. In theory, the ID can be any value from <code>0000</code> to <code>FFFF</code>, but in practice, because the patch uses 24-bit pointers for messages and they all need to fit into a single bank, the actual maximum is somewhere around <code>2AAA</code>. This shouldn't be an issue for average users, as this still means the patch supports up to 10922 individual messages.
			</p>
			
			<p>
				One thing to be aware of when assigning message IDs is that the patch will automatically generate pointers for every single message. Since the pointers are stored as a simple table that is looked up via the message ID, whenever there's a gap in message IDs the patch needs to fill in that gap via dummy pointers. So if you have a message file that only contains two messages with IDs <code>0000</code> and <code>0100</code>, then the patch will generate dummy pointers for all IDs from <code>0001</code> to <code>00FF</code>. Since this wastes free space, it is advised to avoid gaps in message IDs altogether. The patch will print a warning once it detects a certain number of gaps.
			</p>
			
			<p>
				The <code>%vwf_header()</code> always needs to be the first line right after the <code>%vwf_message_start()</code>. This line allows you to override text box settings by passing different arguments to the <code>%vwf_header()</code> macro. More details on that in section <a href="#header-settings">Header Settings</a>.
			</p>
			
			<p>
				After the header is where you add your text commands. Without any commands, all you'll get is an empty text box. See section <a href="#text-commands">Text Commands</a> for a full list of what commands are available.
			</p>
			
			<p>
				Putting everything together, here is a simple example of what a full text box might look like:
				
				<pre><code>%vwf_message_start(001A)

	%vwf_header(x_pos(10), y_pos(10), width(5), height(1), text_alignment(TextAlignment.Centered))
	
	!text("What's up, Mario? Hope you have a nice day!")

%vwf_message_end()</code></pre>
			</p>

			<h3 id="header-settings" class="text-center">Header Settings</h3>
			<p>
				When defining your own text boxes, the very first thing you'll want to look at are the header settings. These settings define a number of general properties of your text box, like position, size, sound effects and more. The way this works is by passing optional arguments as function calls to the <code>%vwf_header()</code> macro in your message. Here's an example:
				
				<pre><code>%vwf_header(vwf_x_pos(0), vwf_y_pos(0), vwf_width(15), vwf_height(13))</code></pre>
				
				When any argument is omitted, its value will be pulled from the default values defined in <code>vwfconfig.cfg</code>. For example, when you omit the <code>vwf_x_pos</code> argument, the patch will use the <code>!vwf_default_x_pos</code> define in its place.
			</p>
			
			<p>
				Header arguments, like text commands, support short aliases via the <code>!vwf_enable_short_aliases</code> setting. When enabled, the <code>vwf_</code> prefix on all arguments can be omitted. Example:
				
				<pre><code>%vwf_header(x_pos(0), y_pos(0), width(15), height(13))</code></pre>
				
				What follows is a list of all header arguments along with a brief explanation.
			</p>			
			
			<h4 id="header-settings-text-box-properties" class="text-center">Text Box Properties</h4>
			<dl>				
				<dt id="header-settings-vwf_x_pos"><code>vwf_x_pos()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_x_pos(x_pos)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>x_pos(x_pos) = vwf_x_pos(x_pos)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>x_pos: number:</code> The X position to use. (min: <code>0</code>, max: <code>28</code>)</li>
							</ul></td>
						</tr>
					</table>
					Specifies the X position of the text box on the screen in 8x8 tile increments. An <code>x_pos</code> of 1 moves the text box one 8x8 tile (=8 pixels) the right, an x_pos of 2 two 8x8 tiles etc. Depending on the size of the text box, the patch might automatically clamp this value down to prevent it from going beyond the screen border.
				</p></dd>
				
				<dt id="header-settings-vwf_y_pos"><code>vwf_y_pos()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_y_pos(y_pos)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>y_pos(y_pos) = vwf_y_pos(y_pos)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>y_pos: number:</code> The Y position to use. (min: <code>0</code>, max: <code>24</code>)</li>
							</ul></td>
						</tr>
					</table>
					Specifies the Y position of the text box on the screen 8x8 tile increments. A <code>y_pos</code> of 1 moves the text box one 8x8 tile (=8 pixels) down, a y_pos of 2 two 8x8 tiles etc. Depending on the size of the text box, the patch might automatically clamp this value down to prevent it from going beyond the screen border.
				</p></dd>
				
				<dt id="header-settings-vwf_width"><code>vwf_width()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_width(width)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>width(width) = vwf_width(width)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>width: number:</code> The width to use. (min: <code>1</code>, max: <code>15</code>)</li>
							</ul></td>
						</tr>
					</table>
					Specifies the width of the inside area (aka the text area) of the text box in 16x16 tile increments. A value of 1 means one 16x16 tile (=16 pixels), a value of 2 two 16x16 tiles etc. To get the total width of the entire text box, add two 8x8 tiles for the text box frame to this.
				</p></dd>
				
				<dt id="header-settings-vwf_height"><code>vwf_height()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_height(height)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>height(height) = vwf_height(height)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>height: number:</code> The height to use. (min: <code>1</code>, max: <code>13</code>)</li>
							</ul></td>
						</tr>
					</table>
					Specifies the height of the inside area (aka the text area) of the text box in 16x16 tile increments. A value of 1 means one 16x16 tile (=16 pixels), a value of 2 two 16x16 tiles etc. To get the total height of the entire text box, add two 8x8 tiles for the text box frame to this.
				</p></dd>
				
				<dt id="header-settings-vwf_box_animation"><code>vwf_box_animation()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_box_animation(animation)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>box_animation(animation) = vwf_box_animation(animation)
BoxAnimation = VWF_BoxAnimation</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>animation: VWF_BoxAnimation:</code> The animation to use. Valid values:
								<table class="parameter-list">
									<tr><th>Value</th><th>Description</th></tr>
									<tr><td><code>VWF_BoxAnimation.None</code></td><td>Don't display any text box at all (only text will be visible).</td></tr>
									<tr><td><code>VWF_BoxAnimation.SoE</code></td><td>Animate the text box like in Secret of Evermore (the text box expands top to bottom).</td></tr>
									<tr><td><code>VWF_BoxAnimation.SoM</code></td><td>Animate the text box like in Secret of Mana (the text box expands from the center to the outside).</td></tr>
									<tr><td><code>VWF_BoxAnimation.MMZ</code></td><td>Animate the text box like in Mega Man Zero (the text box expands from left to right).</td></tr>
									<tr><td><code>VWF_BoxAnimation.Instant</code></td><td>Display the entire text box at once, without any animation.</td></tr>
								</table>								
								</li>
							</ul></td>
						</tr>
					</table>
					Specifies the animation to play when opening the text box (or hides the text box entirely).
				</p></dd>
			</dl>

			<h4 id="header-settings-text-properties" class="text-center">Text Properties</h4>
			<dl>
				<dt id="header-settings-vwf_font"><code>vwf_font()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_font(font_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>font(font_id) = vwf_font(font_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>font_id: number:</code> The ID of the font to use. (min: <code>0</code>, max: <code>[number of total fonts] - 1</code>)</li>
							</ul></td>
						</tr>
					</table>
					Specifies the font to use for the text box (when not overridden by a text command). Font IDs are based on the order of <code>%vwf_add_font()</code> calls in your <code>vwfconfig.cfg</code>, starting at <code>0</code>. This setting is ignored when running in 16-bit mode. Note that this setting does not affect the active character mapping table, so if you require different tables for different fonts, you'll have to load them manually via an <code>incsrc</code>. See <a href="#resources-fonts">Fonts</a> for details.
				</p></dd>
				
				<dt id="header-settings-vwf_text_palette"><code>vwf_text_palette()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_text_palette(palette_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>text_palette(palette_id) = vwf_text_palette(palette_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>palette_id: number:</code> The ID of the palette to use. (min: <code>0</code>, max: <code>7</code>)</li>
							</ul></td>
						</tr>
					</table>
					Specifies what palette number to use for text, outlines and background of the text box (when not overridden by a text command). This is based on a 2BPP (4-color) palette, meaning each increment moves the palette four colors ahead. Only the first two rows of Lunar Magic's palette are usable, giving you a choice between eight palettes in total. While the text box is open, the patch will overwrite the colors in this palette with whatever colors were specified for the text, outline and background colors. This means you should avoid selecting any palette that is being used for the level graphics and might be visible on the screen when you open the text box. Additionally, you should avoid using the same palette as set for <code>!vwf_frame_palette</code> in <code>vwfconfig.cfg</code>. Doing so would lead to undefined behavior.
				</p></dd>
				
				<dt id="header-settings-vwf_text_color"><code>vwf_text_color()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_text_color(color)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>text_color(color) = vwf_text_color(color)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>color: rgb15-color:</code> The color to use, in RGB15 format.</li>
							</ul></td>
						</tr>
					</table>
					Specifies the text color to use for the text box. In other words, this determines which color gets written to color 2 (the third color) of the palette specified with <a href="#header-settings-vwf_text_palette"><code>vwf_text_palette()</code></a>. You can use the <a href="#helper-functions-rgb_15"><code>rgb_15()</code></a> helper function to specify the color via its RGB components.
				</p></dd>
				
				<dt id="header-settings-vwf_outline_color"><code>vwf_outline_color()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_outline_color(color)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>outline_color(color) = vwf_outline_color(color)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>color: rgb15-color:</code> The color to use, in RGB15 format.</li>
							</ul></td>
						</tr>
					</table>
					Specifies the outline color to use for the text box. In other words, this determines which color gets written to color 3 (the fourth color) of the palette specified with <a href="#header-settings-vwf_text_palette"><code>vwf_text_palette()</code></a>. You can use the <a href="#helper-functions-rgb_15"><code>rgb_15()</code></a> helper function to specify the color via its RGB components.
				</p></dd>
				
				<dt id="header-settings-vwf_space_width"><code>vwf_space_width()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_space_width(width)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>space_width(width) = vwf_space_width(width)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>width: number:</code> The width in pixels. (min: <code>0</code>, max: <code>15</code>).</li>
							</ul></td>
						</tr>
					</table>
					Specifies the width of the space character within this text box. It's recommended to use at least 6 to 8 pixels for this, depending on whether the font you use has outlines on both sides (left and right), on just one side, or no outlines at all. The reason for this has to do with the way the <a href="#text-command-vwf_set_text_palette"><code>vwf_set_text_palette()</code></a> command works. It can only modify the text palette per 8x8 tile, not per character or word. Using a wide enough space here assures that if you use this command to recolor a word surrounded by spaces, the palette change will never cut into tiles of surrounding words in a visible way.
				</p></dd>
				
				<dt id="header-settings-vwf_text_margin"><code>vwf_text_margin()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_text_margin(margin)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>text_margin(margin) = vwf_text_margin(margin)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>margin: number:</code> The margin in pixels. (min: <code>0</code>, max: <code>15</code>).</li>
							</ul></td>
						</tr>
					</table>
					Specifies the number of pixels to keep empty at the left and right edges of the text box.
				</p></dd>
				
				<dt id="header-settings-vwf_text_alignment"><code>vwf_text_alignment()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_text_alignment(alignment)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>text_alignment(alignment) = vwf_text_alignment(alignment)
TextAlignment = VWF_TextAlignment</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>alignment: VWF_TextAlignment:</code> The text alignment to use. Valid values:
								<table class="parameter-list">
									<tr><th>Value</th><th>Description</th></tr>
									<tr><td><code>VWF_TextAlignment.Left</code></td><td>The text is left-aligned.</td></tr>
									<tr><td><code>VWF_TextAlignment.Centered</code></td><td>The text is centered.</td></tr>
								</table>								
								</li>
							</ul></td>
						</tr>
					</table>
					Specifies the text alignment for this text box.
				</p></dd>				
			</dl>

			<h4 id="header-settings-speed-and-flow-settings" class="text-center">Speed &amp; Flow Settings</h4>
			<dl>
				<dt id="header-settings-vwf_freeze_game"><code>vwf_freeze_game()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_freeze_game(freeze)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>freeze_game(freeze) = vwf_freeze_game(freeze)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>freeze: boolean:</code> Whether to freeze (<code>true</code>) or not freeze (<code>false</code>) gameplay.</li>
							</ul></td>
						</tr>
					</table>
					<p>Specifies whether gameplay should freeze while the text box is open. For non-SA-1 ROMs, the general recommendation is to always set this to true, as the patch is too demanding for them to run gameplay at the same time, leading to slowdown. It's recommended to use an SA-1 ROM instead if you want to make use of this feature. It should be fast enough for a dialog not to slow down gameplay.
					<a tabindex="0" role="button" data-toggle="collapse" data-target="#video-sa1" aria-expanded="false" aria-controls="video-sa1">You can see it in action in this ancient video.</a>
					<div id="video-sa1" class="collapse mt-3">
						<iframe class="video" style="height:640px;" src="https://www.youtube.com/embed/hGmuaMoVO9I?rel=0&amp;start=71" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
					</div></p>
					<p>If you absolutely must use a non-SA-1 ROM, here's a few tips for lessening the impact of slowdown:
					<ul>
						<li>Make sure all FastROM options of Lunar Magic are enabled. This will notably increase game speed even in non-SA-1 ROMs.</li>
						<li>Use slower text speeds. Slower text speeds mean there's more frames without any text processing happening between each character, thus lag frames will be more spaced out and less noticable.</li>
						<li>Use smaller text boxes overall with long wait times at the end. This again helps spacing out lag frames to make them less noticable.</li>
						<li>Keep the number of sprites on-screen during a text box low.</li>
						<li>Make use of animation style <a href="#header-settings-vwf_box_animation"><code>VWF_BoxAnimation.None</code></a>, which disables the text box background entirely and makes the patch skip a good chunk of code.</li>
					</ul></p>
					<p>Whenever you do allow gameplay during text boxes, you should try to make sure they close by the time any level transition occurs (like from entering a pipe, touching a goal post or dying). The patch does try to automatically close text boxes to prevent glitches, but there's always a chance for oversights with this feature. You're on the safe side when you only use your text boxes in predictable environments.</p>
				</p></dd>
				
				<dt id="header-settings-vwf_text_speed"><code>vwf_text_speed()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_text_speed(speed)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>text_speed(speed) = vwf_text_speed(speed)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>speed: number:</code> The number of frames to wait between characters. (min: <code>0</code>, max: <code>63</code>).</li>
							</ul></td>
						</tr>
					</table>
					Specifies the number of frames the text box should wait between displaying each character. This effectively sets the text speed. A value of <code>0</code> represents the fastest text speed, a value of <code>63</code> the slowest.
				</p></dd>
				
				<dt id="header-settings-vwf_auto_wait"><code>vwf_auto_wait()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_auto_wait(mode)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>auto_wait(mode) = vwf_auto_wait(mode)
AutoWait = VWF_AutoWait</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>mode: VWF_AutoWait:</code> The action to perform. Valid values:
								<table class="parameter-list">
									<tr><th>Value</th><th>Description</th></tr>
									<tr><td><code>VWF_AutoWait.None</code></td><td>Do "nothing" (just clears the text box and continues).</td></tr>
									<tr><td><code>VWF_AutoWait.WaitForA</code></td><td>Automatically pause the text box until the A button is pressed, in a similar manner to the <a href="#text-command-vwf_wait_for_a"><code>%vwf_wait_for_a()</code></a> text command.</td></tr>
									<tr><td><code>VWF_AutoWait.WaitFrames.1</code><br/><code>VWF_AutoWait.WaitFrames.2</code><br/>[...]<br/><code>VWF_AutoWait.WaitFrames.254</code></td><td>Automatically pause the text box for the specified number of frames, before clearing it and continuing.</td></tr>
								</table>
								</li>
							</ul></td>
						</tr>
					</table>
					Specifies the action to take when text exceeds the available space of a text box. Compatibility note: In all pre-macro versions of this patch, due to a programming oversight, the minimum number of frames to wait with the <code>WaitFrames</code> setting was <code>2</code> and the maximum was <code>255</code>, whereas in current versions the supported range is <code>1</code> to <code>254</code> frames. Keep this in mind if you plan to port text data from an older version to a newer one. Slight adjustments to text box headers might be necessary.
				</p></dd>
				
				<dt id="header-settings-vwf_button_speedup"><code>vwf_button_speedup()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_button_speedup(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>button_speedup(enable) = vwf_button_speedup(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>enable: boolean:</code> Whether to enable (<code>true</code>) or disable (<code>false</code>) button-speedup.</li>
							</ul></td>
						</tr>
					</table>
					Specifies whether the text box supports button-speedup. When enabled, text can be sped-up by holding down the A button. This only applies to text boxes with a text speed setting greater than 0, as all this does is to reduce that setting to 0 while the button is being held down.
				</p></dd>
				
				<dt id="header-settings-vwf_enable_skipping"><code>vwf_enable_skipping()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_enable_skipping(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>enable_skipping(enable) = vwf_enable_skipping(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>enable: boolean:</code> Whether to enable (<code>true</code>) or disable (<code>false</code>) skipping.</li>
							</ul></td>
						</tr>
					</table>
					Specifies whether this text box can be skipped. When enabled, pressing the Start button will immediately move the text pointer forward to the text box's skip location. By default, this is the end of the text box (thus closing it). However, this can be overridden by using the <a href="#text-command-vwf_set_skip_location"><code>%vwf_set_skip_location()</code></a> text command within your text box, which will set the skip location to the location of the command. NOTE: This can be done only once per text box. Using the command multiple times within the same text box will generate an error.
				</p></dd>
			</dl>

			<h4 id="header-settings-sound-effects" class="text-center">Sound Effects</h4>
			<dl>				
				<dt id="header-settings-vwf_enable_sfx"><code>vwf_enable_sfx()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_enable_sfx(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>enable_sfx(enable) = vwf_enable_sfx(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>enable: boolean:</code> Whether to enable (<code>true</code>) or disable (<code>false</code>) sound effects.</li>
							</ul></td>
						</tr>
					</table>
					Specifies whether this text box should play sound effects or not. When disabled, all other sound effect settings will be ignored.
				</p></dd>
				
				<dt id="header-settings-vwf_letter_sound"><code>vwf_letter_sound()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_letter_sound(sound_bank, sound_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>letter_sound(sound_bank, sound_id) = vwf_letter_sound(sound_bank, sound_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>sound_bank: number:</code> The sound bank of the sound to play. Valid values are <code>$1DF9</code>, <code>$1DFA</code>, <code>$1DFB</code> and <code>$1DFC</code> (although using <code>$1DFB</code> is probably a bad idea).</li>
								<li><code>sound_id: number:</code> The ID of the sound to play. Valid values depend on the selected sound bank. See the <a href="https://www.smwcentral.net/?p=memorymap&amp;game=smw&amp;u=0&amp;address=1dfb&amp;sizeOperation=%3D&amp;sizeValue=&amp;region[]=ram&amp;type=*&amp;description&#61;">SMW Central RAM Map</a> for details.</li>
							</ul></td>
						</tr>
					</table>
					Specifies which sound effect to play when the text box displays a character.
				</p></dd>
				
				<dt id="header-settings-vwf_wait_sound"><code>vwf_wait_sound()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_wait_sound(sound_bank, sound_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>wait_sound(sound_bank, sound_id) = vwf_wait_sound(sound_bank, sound_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>sound_bank: number:</code> The sound bank of the sound to play. Valid values are <code>$1DF9</code>, <code>$1DFA</code>, <code>$1DFB</code> and <code>$1DFC</code> (although using <code>$1DFB</code> is probably a bad idea).</li>
								<li><code>sound_id: number:</code> The ID of the sound to play. Valid values depend on the selected sound bank. See the <a href="https://www.smwcentral.net/?p=memorymap&amp;game=smw&amp;u=0&amp;address=1dfb&amp;sizeOperation=%3D&amp;sizeValue=&amp;region[]=ram&amp;type=*&amp;description&#61;">SMW Central RAM Map</a> for details.</li>
							</ul></td>
						</tr>
					</table>
					Specifies which sound effect to play when the text box waits for an A press (either because of a text command or an auto-wait).
				</p></dd>
				
				<dt id="header-settings-vwf_cursor_sound"><code>vwf_cursor_sound()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_cursor_sound(sound_bank: number, sound_id: number)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>cursor_sound(sound_bank, sound_id) = vwf_cursor_sound(sound_bank, sound_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>sound_bank: number:</code> The sound bank of the sound to play. Valid values are <code>$1DF9</code>, <code>$1DFA</code>, <code>$1DFB</code> and <code>$1DFC</code> (although using <code>$1DFB</code> is probably a bad idea).</li>
								<li><code>sound_id: number:</code> The ID of the sound to play. Valid values depend on the selected sound bank. See the <a href="https://www.smwcentral.net/?p=memorymap&amp;game=smw&amp;u=0&amp;address=1dfb&amp;sizeOperation=%3D&amp;sizeValue=&amp;region[]=ram&amp;type=*&amp;description&#61;">SMW Central RAM Map</a> for details.</li>
							</ul></td>
						</tr>
					</table>
					Specifies which sound effect to play when the cursor of a <a href="#text-command-vwf_display_options"><code>%vwf_display_options()</code></a> command moves.
				</p></dd>
				
				<dt id="header-settings-vwf_continue_sound"><code>vwf_continue_sound()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_continue_sound(sound_bank: number, sound_id: number)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>continue_sound(sound_bank, sound_id) = vwf_continue_sound(sound_bank, sound_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>sound_bank: number:</code> The sound bank of the sound to play. Valid values are <code>$1DF9</code>, <code>$1DFA</code>, <code>$1DFB</code> and <code>$1DFC</code> (although using <code>$1DFB</code> is probably a bad idea).</li>
								<li><code>sound_id: number:</code> The ID of the sound to play. Valid values depend on the selected sound bank. See the <a href="https://www.smwcentral.net/?p=memorymap&amp;game=smw&amp;u=0&amp;address=1dfb&amp;sizeOperation=%3D&amp;sizeValue=&amp;region[]=ram&amp;type=*&amp;description&#61;">SMW Central RAM Map</a> for details.</li>
							</ul></td>
						</tr>
					</table>
					Specifies which sound effect to play when the user presses the A button while the text box is waiting for an A press, or when the user selects an option from a <a href="#text-command-vwf_display_options"><code>%vwf_display_options()</code></a> command.
				</p></dd>
			</dl>

			<h4 id="header-settings-advanced" class="text-center">Advanced</h4>
			<dl>				
				<dt id="header-settings-vwf_enable_message_asm"><code>vwf_enable_message_asm()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_enable_message_asm(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>enable_message_asm(enable) = vwf_enable_message_asm(enable)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>enable: boolean:</code> Whether to enable (<code>true</code>) or disable (<code>false</code>) <code>MessageASM</code>.</li>
							</ul></td>
						</tr>
					</table>
					Specifies whether <code>MessageASM</code> should be enabled for this text box. See section <a href="#message-asm"><code>MessageASM</code></a> for details.
				</p></dd>
			</dl>

			<h3 id="text-commands" class="text-center">Text Commands</h3>
			<p>
				With everything else out of the way, it's time to finally start defining the actual contents of our text boxes. This is done by inserting text commands between a message's <code>%vwf_header()</code> and <code>%vwf_message_end()</code> (see section <a href="#message-format">Message Format</a> for details). These text commands usually take the form of macro calls, but can also be defines when using short aliases. Here's a simple example of a message containing some text commands:
				
				<pre><code>%vwf_message_start(0000)

	%vwf_header()
	
	; One command per line
	%vwf_text("You can write each text command on a separate line like this.")
	%vwf_wait_for_a()
	%vwf_clear()
	
	; Multiple commands on a single line
	%vwf_text("But you can also chain them together on one line via a colon.") : %vwf_wait_for_a() : %vwf_clear()
	
	; These two lines are equivalent, but one uses short aliases, the other doesn't.
	%vwf_text("Hello?") : %vwf_wait_for_a() : %vwf_line_break()
	!str("Hello?") : !press_a : !n

%vwf_message_end()</code></pre>

				Some text commands have parameters tagged as &quot;<code>(optional)</code>&quot;. This means the respective parameter can be omitted, in which case a default value will be used.
			</p>
			
	
			<h4 id="text-commands-text-output" class="text-center">Text Output</h4>
			<dl>
				<dt id="text-commands-vwf_text"><code>%vwf_text()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_text(text)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!text(text) = %vwf_text(text)
!str(text) = %vwf_text(text)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>text: string:</code> The text to output.</li>
							</ul></td>
						</tr>
					</table>
					This command prints a string of regular text to the text box. Your currently active <a href="#resources-fonts">table file</a> defines how each character maps onto the currently active <a href="#resources-fonts">font</a> to display the respective character. Whenever a text string you print would overflow the available space of the text box, the <a href="#header-settings-vwf_auto_wait">vwf_auto_wait()</a> header setting defines what action should be taken.<br/><br/>
					A word of caution: For the implementation of text commands, the patch reserves a certain number of character values. Currently, these are <code>$E7</code> to <code>$FF</code> when running in 8-bit mode, or <code>$FFE7</code> to <code>$FFFF</code> when running in 16-bit mode. Trying to print any character with this command that maps onto one of those values (except for <code>$FE</code>, which represents the <a href="#text-commands-vwf_space">vwf_space()</a> command) will likely result in bugs. Currently, these characters need to be escaped manually using the <a href="#text-commands-vwf_char">vwf_char()</a> command. A future version of the patch might automate this process if possible.
				</p></dd>
				
				<dt id="text-commands-vwf_char"><code>%vwf_char()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_char(char)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!char(char) = %vwf_char(char)
!chr(char) = %vwf_char(char)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>char: character:</code> The character to output.</li>
							</ul></td>
						</tr>
					</table>
					Prints a single character to the text box. Unlike <a href="#text-commands-vwf_text">vwf_text()</a>, this command escapes every character you output and can thus never accidentally map onto another text command, so you can use it to safely print any raw character from a font to the text box.
				</p></dd>
				
				<dt id="text-commands-vwf_char_at_address"><code>%vwf_char_at_address()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_char_at_address(address)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!ram_char(address) = %vwf_char_at_address(address)
!ram_chr(address) = %vwf_char_at_address(address)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>address: number:</code> The RAM/ROM address to read.</li>
							</ul></td>
						</tr>
					</table>
					This command works just like <a href="#text-commands-vwf_char">vwf_char()</a>, except the value you pass in is a RAM address. The game will read out that address and interpret whatever value it currently holds as the character to print. An example use case of this could be printing the SMW timer, which has each of its digits stored in separate RAM addresses (note: this particular use case only works with fonts where all digits are the first glyphs in the font - so for example, character value $00 would map onto the 0 digit glyph, $01 on the 1 digit glyph etc.).
				</p></dd>
				
				<dt id="text-commands-vwf_space"><code>%vwf_space()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_space()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!sp = %vwf_space()
!space = %vwf_space()</code></pre></td>
						</tr>
					</table>
					Prints a single space to the text box and causes the automatic word wrapping processor to run. If the next word no longer fits onto the current line, a line break is automatically inserted. See <a href="#text-commands-vwf_line_break"><code>%vwf_line_break()</code></a> for details. Note that there's no reason to ever use this command under normal circumstances. The default character to glyph mapping tables included with the patch already map the space character to the <code>%vwf_space()</code> command, so just using the <a href="#text-commands-vwf_text"><code>%vwf_text()</code></a> command is sufficient and will produce automatic line breaks.
				</p></dd>
				
				<dt id="text-commands-vwf_non_breaking_space"><code>%vwf_non_breaking_space()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_non_breaking_space()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!nbsp = %vwf_non_breaking_space()</code></pre></td>
						</tr>
					</table>
					An alias for <code>%vwf_char(!vwf_nbsp_char)</code>, with <code>!vwf_nbsp_char = $00FE</code>. Basically, this prints character <code>$00FE</code> (which usually maps to a space) to the text box as a raw character. The purpose of this command is to print a space without invoking the word wrapping processor, similar to the <code>&amp;nbsp;</code> HTML entity. Useful when you want to prevent two words from being separated and ending up on two different lines. For example, if you want the name &quot;Super Mario&quot; to always appear on a single line, you can assure that by using this command in place of the space.
				</p></dd>
				
				<dt id="text-commands-vwf_decimal"><code>%vwf_decimal()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_decimal(address, address_size, leading_zeros)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!dec(address, address_size, leading_zeros) = %vwf_decimal(address, address_size, leading_zeros)
AddressSize = VWF_AddressSize</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>address: number:</code> The RAM/ROM address to read.</li>
								<li><code>address_size (optional): VWF_AddressSize:</code> The size of the address to read. Default: <code>VWF_AddressSize.8Bit</code>. Valid values:
								<table class="parameter-list">
									<tr><th>Value</th><th>Description</th></tr>
									<tr><td><code>VWF_AddressSize.8Bit</code></td><td>8-bit address.</td></tr>
									<tr><td><code>VWF_AddressSize.16Bit</code></td><td>16-bit address.</td></tr>
								</table>
								</li>
								<li><code>leading_zeros (optional): boolean:</code> Whether to output leading zeros (<code>true</code>) or not (<code>false</code>). Default: <code>false</code></li>
							</ul></td>
						</tr>
					</table>
					Reads out a RAM address and prints its value to the text box as a decimal number. Depending on the <code>address_size</code> parameter, the address is either interpreted to be an <code>8-bit</code> number (using a single byte) or a <code>16-bit</code> number (using two bytes). When the <code>leading_zeros</code> parameter is set to <code>true</code>, leading zeros will be printed. Up to three total places for 8-bit numbers and up to five for 16-bit numbers.
				</p></dd>
				
				<dt id="text-commands-vwf_hex"><code>%vwf_hex()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_hex(address)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!hex(address) = %vwf_hex(address)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>address: number:</code> The RAM/ROM address to read.</li>
							</ul></td>
						</tr>
					</table>
					Reads out a RAM address and prints its value to the text box as a hexadecimal number.
				</p></dd>
			</dl>
	
			<h4 id="text-commands-text-properties" class="text-center">Text Properties</h4>
			<dl>				
				<dt id="text-commands-vwf_set_font"><code>%vwf_set_font()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_font(font_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!font(font_id) = %vwf_set_font(font_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>font_id: number:</code> The ID of the font to set.</li>
							</ul></td>
						</tr>
					</table>
					Sets the currently active font. The same format and restrictions as in the <a href="#header-settings-vwf_font"><code>vwf_font()</code></a> header setting apply.
				</p></dd>
				
				<dt id="text-commands-vwf_char_offset"><code>%vwf_char_offset()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_char_offset(offset)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!char_offset(offset) = %vwf_char_offset(offset)
!chr_offset(offset) = %vwf_char_offset(offset)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>offset: number:</code> The character offset to apply. (min: <code>$0000</code>, max: <code>$FFFF</code>)</li>
							</ul></td>
						</tr>
					</table>
					Sets a character offset which is added to every single character printed to the text box (default value: <code>$0000</code>). Here's a simple example:
					<pre><code>%vwf_char_offset($0010)
%vwf_char($01) : %vwf_char($02) : %vwf_char($03)</code></pre>
					Normally, you would expect this to print characters <code>$01</code>, <code>$02</code> and <code>$03</code> to the text box, but due to the <code>%vwf_char_offset($0010)</code>, what actually gets printed are characters <code>$11</code>, <code>$12</code> and <code>$13</code>.<br/><br/>
					The main purpose of this command is to enable the usage of arbitrarily sized fonts. This is especially useful in 16-bit mode, where any of the regular font settings and commands are ignored. Imagine a scenario in which you have one font occupying font slots <code>$00</code> to <code>$03</code> (each containing <code>$100</code> glyphs) and another occupying font slots <code>$04</code> to <code>$07</code>. Running the patch in 16-bit mode, you could do something like this:
					<pre><code>%vwf_text("Hello world!")
%vwf_char_offset($0400)
%vwf_text("Hello world!")</code></pre>
					The first &quot;Hello world!&quot; here would be printed with glyphs starting at font slot <code>$00</code>, whereas the second &quot;Hello world!&quot; would be printed with glyphs starting at font slot <code>$04</code>, making it possible to print each of the strings in a different font. In 8-bit mode, this usually wouldn't be necessary, since you could just use <code>%vwf_set_font($04)</code> instead.
				</p></dd>
				
				<dt id="text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_change_colors(start_color_no, color_values...)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!edit_pal(start_color_no, color_values...) = %vwf_change_colors(start_color_no, color_values...)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>start_color_no: number:</code> The number of the first color from the palette to overwrite. (min: <code>$00</code>, max: <code>$FF</code>)</li>
								<li><code>color_values...: rgb15-color:</code> One or more color values to write to the palette (separated by comma), in RGB15 format.</li>
							</ul></td>
						</tr>
					</table>
					This command allows you to overwrite colors in the currently active palette. You can overwrite multiple colors at once, starting at <code>start_color_no</code>, by passing in a list of color values. The main purpose of this is to follow it up with a call to <a href="#text-commands-vwf_set_text_palette"><code>%vwf_set_text_palette()</code></a> to effectively change the text color. Since this command modifies the active palette, using it carelessly will lead to unintended side effects (randomly changing colors on screen). Make sure to only ever overwrite colors that aren't currently visible anywhere on the screen. Once a text box closes, the patch will restore the original state of the palette from before opening any text box. See <a href="#helper-functions-vwf_get_color_index_2bpp">%vwf_get_color_index_2bpp()</a> for help with specifying <code>start_color_no</code>.
				</p></dd>
				
				<dt id="text-commands-vwf_set_text_palette"><code>%vwf_set_text_palette()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_text_palette(palette_index)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!set_pal(palette_index) = %vwf_set_text_palette(palette_index)
!reset_color = %vwf_set_text_palette(!vwf_default_text_palette)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>palette_index: number:</code> The index of the palette to set. (min: <code>$00</code>, max: <code>$07</code>)</li>
							</ul></td>
						</tr>
					</table>
					Switches the currently active text palette to another one. Assumes 2BPP color palettes, so a value of <code>$00</code> will give you the first four colors of Lunar Magic's palette, a value of <code>$01</code> the second four colors and so on. Also overwrites color <code>$01</code> of the selected palette (aka the second color) with the currently active text box background color, so the same restrictions apply as for <a href="#text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></a> (in other words, make sure not to overwrite any color currently visible on screen). This command is meant to be paired with <a href="#text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></a> to effectively switch the active text color. Note that in the current version of this patch, any time the text box is cleared (whether automatically or as the result of a <a href="#text-commands-vwf_clear"><code>%vwf_clear()</code></a> command), the current text palette assignment is reset to the default. This is likely unintentional and might change in a future version of the patch. Also see <a href="#header-settings-vwf_space_width"><code>vwf_space_width()</code></a> for some additional pitfalls related to this command.
				</p></dd>
				
				<dt id="text-commands-vwf_set_text_color"><code>%vwf_set_text_color()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_text_color(palette_index, text_color_value)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!set_color(palette_index, text_color_value) = %vwf_set_text_color(color_no, text_color_value)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>palette_index: number:</code> The index of the 2BPP palette in which to overwrite colors. (min: <code>$00</code>, max: <code>$07</code>)</li>
								<li><code>text_color_value: rgb15-color:</code> The text color value to write to the palette, in RGB15 format.</li>
							</ul></td>
						</tr>
					</table>
					This command is a shorthand way of calling both <a href="#text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></a> and <a href="#text-commands-vwf_set_text_palette"><code>%vwf_set_text_palette()</code></a> and lets you switch the active text color more easily. It sets the text color (color <code>$02</code>) of palette <code>palette_index</code> to color <code>text_color_value</code>, sets the outline color (color <code>$03</code>) to black, sets the background color (color <code>$01</code>) to the currently active one, and then automatically switches the active text palette to <code>palette_index</code>. All restrictions that apply to <a href="#text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></a> and <a href="#text-commands-vwf_set_text_palette"><code>%vwf_set_text_palette()</code></a> also apply to this command.
				</p></dd>
			</dl>
	
	
			<h4 id="text-commands-text-flow" class="text-center">Text Flow</h4>
			<dl>
				<dt id="text-commands-vwf_line_break"><code>%vwf_line_break()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_line_break()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!n = %vwf_line_break()
!lf = %vwf_line_break()
!break = %vwf_line_break()
!new_line = %vwf_line_break()</code></pre></td>
						</tr>
					</table>
					Inserts a line break into the text box. If the text has already reached the last line of the text box, the <a href="#header-settings-vwf_auto_wait"><code>vwf_auto_wait()</code></a> header setting dictates how to proceed before automatically clearing the text box.
				</p></dd>
				
				<dt id="text-commands-vwf_clear"><code>%vwf_clear()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_clear()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!clear = %vwf_clear()</code></pre></td>
						</tr>
					</table>
					Clears the text box. Following text being printed will start back at the first line of the text box.
				</p></dd>
				
				<dt id="text-commands-vwf_set_skip_location"><code>%vwf_set_skip_location()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_skip_location()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!skip_loc = %vwf_set_skip_location()</code></pre></td>
						</tr>
					</table>
					When the <a href="#header-settings-vwf_enable_skipping"><code>vwf_enable_skipping()</code></a> header setting was set to <code>true</code>, this text command can be used to mark the destination of skipping. When pressing the Start button, the text box will immediately jump to the location in the message where this command was used. Can only be used once per message.
				</p></dd>
				
				<dt id="text-commands-vwf_close"><code>%vwf_close()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_close()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!close = %vwf_close()</code></pre></td>
						</tr>
					</table>
					Closes the text box, restores backed up layer 3 and palette data, and resumes gameplay. It's normally not necessary to call this command explicitly, as each <code>%vwf_message_end()</code> already does so automatically. You only need to use it when you want to close a text box early (for example: from a specific choice of a <a href="#text-commands-vwf_display_options"><code>%vwf_display_options()</code></a>).
				</p></dd>
				
				<dt id="text-commands-vwf_wait_for_a"><code>%vwf_wait_for_a()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_wait_for_a()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!press_a = %vwf_wait_for_a()</code></pre></td>
						</tr>
					</table>
					Pauses the text box until the player presses the A button.
				</p></dd>
				
				<dt id="text-commands-vwf_wait_frames"><code>%vwf_wait_frames()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_wait_frames(num_frames)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!wait_frames(num_frames) = %vwf_wait_frames(num_frames)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>num_frames: number:</code> The number to frames to wait + 1. (min: <code>0</code>, max: <code>255</code>)</li>
							</ul></td>
						</tr>
					</table>
					Pauses the text box for <code>num_frames + 1</code> frames.
				</p></dd>
				
				<dt id="text-commands-vwf_set_text_speed"><code>%vwf_set_text_speed()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_text_speed(speed)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!wait_frames(speed) = %vwf_set_text_speed(speed)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>speed: number:</code> The number to frames to wait between characters + 1. (min: <code>0</code>, max: <code>255</code>)</li>
							</ul></td>
						</tr>
					</table>
					Sets the text rendering speed. The speed is defined as the number of frames to wait between each character being printed.
				</p></dd>
				
				<dt id="text-commands-vwf_freeze"><code>%vwf_freeze()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_freeze()</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!freeze = %vwf_freeze()
!halt = %vwf_freeze()</code></pre></td>
						</tr>
					</table>
					Freezes the text box entirely. The only way to unfreeze it is to modify the text pointer directly from code. You can use <a href="#message-asm">MessageASM</a> to do this. Consider this an advanced function.
				</p></dd>
				
				<dt id="text-commands-vwf_set_text_pointer"><code>%vwf_set_text_pointer()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_text_pointer(address)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!jump(address) = %vwf_set_text_pointer(address)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>address: number:</code> The address to set the text pointer to.</li>
							</ul></td>
						</tr>
					</table>
					Modifies the text pointer (aka the location the patch is currently reading message data from). Can even be pointed to a RAM address (which could be useful for printing user-defined text, like a player name). When doing so, you should make sure the RAM address in question is already filled with the intended text data before the text box is opened. Filling it while the text box is active could lead to the word wrapping processor and the text renderer seeing different data, which could lead to unexpected word wrapping behavior. See <a href="#helper-functions-vwf_inline"><code>vwf_inline()</code></a> for how to define message data outside the scope of a message.
				</p></dd>
				
				<dt id="text-commands-vwf_display_message"><code>%vwf_display_message()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_display_message(message_no, show_close_anim, show_open_anim)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!open_message(message_no, show_close_anim, show_open_anim) = %vwf_display_message(message_no, show_close_anim, show_open_anim)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>message_no: number:</code> The message to display in the new message box. (min: <code>$0000</code>, max: <code>$FFFF</code>)</li>
								<li><code>show_close_anim: boolean:</code> Whether to play (<code>true</code>) or don't play (<code>false</code>) the close animation on the old text box. Default: <code>false</code></li>
								<li><code>show_open_anim: boolean:</code> Whether to play (<code>true</code>) or don't play (<code>false</code>) the open animation on the new text box. Default: <code>false</code></li>
							</ul></td>
						</tr>
					</table>
					Closes the current text box and immediately opens a new one with another message. When <code>show_open_anim</code> is set to <code>false</code>, certain text box settings (such as selected frame, selected background or selected background color) won't be reloaded. Set it to <code>true</code> if you require them to be reloaded. You can use the <a href="#header-settings-vwf_box_animation"><code>VWF_BoxAnimation.Instant</code></a> animation style on the new text box to make it appear as though it still appears instantaneously.
				</p></dd>
				
				<dt id="text-commands-vwf_display_options"><code>%vwf_display_options()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_display_options(unique_label_name, option_texts...)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!options(unique_label_name, option_texts...) = %vwf_display_options(unique_label_name, option_texts...)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>unique_label_name: name:</code> A label name identifying this options block. Must be unique per message box. May only contain the following characters:<br/><code>abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ _ 0123456789</code></li>
								<li><code>option_texts...: vwf-text:</code> One or more options to display.</li>
							</ul></td>
						</tr>
					</table>
					Displays a list of options for the player to choose from, and jumps to different parts of the message depending on what selection they made. The label name must be a valid Asar label name and unique within that message. Supports up to 13 options in theory, but in practice, the number of options is limited by the height of your text box, with each line providing room for one option. Options passed to this command should either be <a href="#text-commands-vwf_text"><code>%vwf_text()</code></a> calls, or multiple text commands wrapped into <a href="#helper-functions-text-commands"><code>%vwf_wrap()</code></a> calls. Use the <a href="#text-commands-vwf_set_option_location"><code>%vwf_set_option_location()</code></a> command to set the target locations for each option (there must be at least one call to <code>%vwf_set_option_location()</code> per option passed to <code>%vwf_display_options()</code>). The <code>!vwf_default_cursor_space</code> setting in <code>vwfconfig.cfg</code> lets you control the margin in pixels between the cursor and the option text. The <code>!vwf_default_cursor_char</code> setting determines what character to use as the cursor. If you need to override either setting for just a single use of <code>%vwf_display_options()</code>, you can do so by overwriting the respective setting before calling the command and then restoring it to its original value afterwards. Please avoid putting any text commands into option texts that modify the text flow. Generally speaking, using commands from the <a href="#text-commands-text-output">Text Output</a>, <a href="#text-commands-text-properties">Text Properties</a> or <a href="#text-commands-text-macros">Text Macros</a> categories should be fine, but using anything else will lead to undefined behavior.
				</p></dd>
				
				<dt id="text-commands-vwf_set_option_location"><code>%vwf_set_option_location()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_set_option_location(options_label_name, option_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!opt_loc(options_label_name, option_id) = %vwf_set_option_location(options_label_name, option_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>options_label_name: name:</code> The unique label name of the options block to set the jump location for.</li>
								<li><code>option_id: number:</code> The ID of the option to set the jump location for.</li>
							</ul></td>
						</tr>
					</table>
					Sets the target destination for a specific choice of a <a href="#text-commands-vwf_display_options"><code>%vwf_display_options()</code></a> command. Upon selecting that choice, the text box will continue at the location where <code>%vwf_set_option_location()</code> was called. The <code>options_label_name</code> parameter must be identical to the <code>unique_label_name</code> passed to <a href="#text-commands-vwf_display_options"><code>%vwf_display_options()</code></a>. The <code>option_id</code> parameter specifies which choice you're setting the location for, starting at <code>0</code>. So if you had the following <a href="#text-commands-vwf_display_options"><code>%vwf_display_options()</code></a> call
					<pre><code>%vwf_display_options(MyOptions, %vwf_text("One"), %vwf_text("Two"), %vwf_text("Three"))</code></pre>
					then calling
					<pre><code>%vwf_set_option_location(MyOptions, 1)</code></pre>
					would set the target location of the <code>Two</code> choice.
				</p></dd>
			</dl>	
	
	
			<h4 id="text-commands-gameplay-modifiers" class="text-center">Gameplay Modifiers</h4>
			<dl>
				<dt id="text-commands-vwf_play_bgm"><code>%vwf_play_bgm()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_play_bgm(bgm_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!play_bgm(bgm_id) = %vwf_play_bgm(bgm_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>bgm_id: number:</code> The ID of the music to play (the value that gets written to <code>$1DFB</code>).</li>
							</ul></td>
						</tr>
					</table>
					Switches the currently active background music by writing <code>bgm_id</code> to <code>$1DFB</code>. See <a href="https://www.smwcentral.net/?p=memorymap&amp;game=smw&amp;u=0&amp;address=1dfb&amp;sizeOperation=%3D&amp;sizeValue=&amp;region[]=ram&amp;type=*&amp;description&#61;">SMW Central RAM Map</a> for details.
				</p></dd>
				
				<dt id="text-commands-vwf_setup_teleport"><code>%vwf_setup_teleport()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_setup_teleport(destination, is_secondary, is_midway_or_water)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!teleport(destination, is_secondary, is_midway_or_water) = %vwf_setup_teleport(destination, is_secondary, is_midway_or_water)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>destination: number:</code> Either the level number to teleport to, or the number of the secondary entrance, depending on whether <code>is_secondary</code> is <code>false</code> or <code>true</code>. (when level: min: <code>$000</code>, max: <code>$1FF</code>, when secondary entrance: min: <code>$0000</code>, max: <code>$1FFF</code>)</li>
								<li><code>is_secondary: boolean:</code> Whether the destination refers to a level number (<code>false</code>) or a secondary entrance number (<code>true</code>).</li>
								<li><code>is_midway_or_water: boolean:</code> When destination is a level number: Whether to enter the level at the midway entrance (<code>true</code>) or not (<code>false</code>). When destination is a secondary entrance number: Whether the destination is a water level (<code>true</code>) or not (<code>false</code>).</li>
							</ul></td>
						</tr>
					</table>
					Sets up a teleport that will activate once the text box closes. The parameters control where the player will be teleported to.
				</p></dd>
			</dl>	
	
	
			<h4 id="text-commands-text-macros" class="text-center">Text Macros</h4>
			<dl>
				<dt id="text-commands-vwf_execute_text_macro"><code>%vwf_execute_text_macro()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_execute_text_macro(macro_name)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!macro(macro_name) = %vwf_execute_text_macro(macro_name)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>macro_name: string:</code> The name of the macro to execute. That is, the name that was passed to <a href="#regular-text-macros"><code>%vwf_register_text_macro()</code></a>.</li>
							</ul></td>
						</tr>
					</table>
					Executes a previously registered text macro. See <a href="#regular-text-macros">Regular Text Macros</a> for details.
				</p></dd>
				
				<dt id="text-commands-vwf_execute_text_macro_by_indexed_group"><code>%vwf_execute_text_macro_by_indexed_group()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_execute_text_macro_by_indexed_group(group_name, index_address)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!macro_group(group_name, index_address) = %vwf_execute_text_macro_by_indexed_group(group_name, index_address)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>group_name: string:</code> The name of the group to index. That is, the name that was passed to <a href="#text-macro-group-function-vwf_start_text_macro_group"><code>%vwf_start_text_macro_group()</code></a>.</li>
								<li><code>index_address: number:</code> The address to use as an index.</li>
							</ul></td>
						</tr>
					</table>
					Indexes a text macro group with the current value of a RAM address, and executes the resulting text macro. See <a href="#text-macro-groups">Text Macro Groups</a> for details.
				</p></dd>
				
				<dt id="text-commands-vwf_execute_buffered_text_macro"><code>%vwf_execute_buffered_text_macro()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_execute_buffered_text_macro(macro_id)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!macro_buf(macro_id) = %vwf_execute_buffered_text_macro(macro_id)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>macro_id: number:</code> The ID of the macro to execute.  (min: <code>0</code>, max: <code>!vwf_num_reserved_text_macros-1</code>)</li>
							</ul></td>
						</tr>
					</table>
					Executes a previously registered buffered text macro. See <a href="#buffered-text-macros">Buffered Text Macros</a> for details.
				</p></dd>
			</dl>
	
	
	
	
			<h4 id="text-commands-advanced" class="text-center">Advanced</h4>
			<dl>				
				<dt id="text-commands-vwf_execute_subroutine"><code>%vwf_execute_subroutine()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_execute_subroutine(address)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!execute(address) = %vwf_execute_subroutine(address)
!exec(address) = %vwf_execute_subroutine(address)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>address: number:</code> The address of the routine to execute.</li>
							</ul></td>
						</tr>
					</table>
					Executes an arbitrary code routine. The patch jumps to this routine via a <code>jsl</code>, so it needs to end in an <code>rtl</code>. Feel free to insert your custom routines directly into <code>vwfmessages.asm</code> (but always outside of a <code>%vwf_message_start()</code>/<code>%vwf_message_end()</code> pair, as the patch might interpret it as text data otherwise). NOTE: The routine is only executed once text rendering itself arrives at the location of this command, not whenever the word wrapping processor sees it. This means running any code inside the routine that will affect what text is being rendered (such as modifying the current text pointer) can lead to unexpected results (such as word wrapping in weird places), as the text being rendered might not match with what the word wrapping processor has previously seen.
				</p></dd>
			</dl>
			

			<h3 id="helper-functions" class="text-center">Helper Functions</h3>
			<p>
				This section covers functionality that doesn't really fit into any other category, but can be useful in certain situations. Some helper functions can be used with both header arguments and text commands, others may be be useful when writing code for VWF dialogues. Read the description on each command for hints on how they might be useful.
			</p>
			
			<h4 id="helper-functions-colors" class="text-center">Colors</h4>
			<dl>
				<dt id="helper-functions-rgb_15"><code>rgb_15()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>rgb_15(r, g, b)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>r: number:</code> The value of the <code>red</code> color channel. (min: <code>0</code>, max: <code>31</code>)</li>
								<li><code>g: number:</code> The value of the <code>green</code> color channel. (min: <code>0</code>, max: <code>31</code>)</li>
								<li><code>b: number:</code> The value of the <code>blue</code> color channel. (min: <code>0</code>, max: <code>31</code>)</li>
							</ul></td>
						</tr>
					</table>
					Defines a 16-bit color value in RGB15 format by separately specifying the values for the <code>red</code>, <code>green</code> and <code>blue</code> color channels.
				</p></dd>
				
				<dt id="helper-functions-vwf_get_color_index_2bpp"><code>vwf_get_color_index_2bpp()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>vwf_get_color_index_2bpp(palette_index, type)</code></pre></td>
						</tr>
						<tr>
							<th>Short Aliases</th>
							<td><pre><code>!text_color_0 = vwf_get_color_index_2bpp($00, VWF_ColorID.Text)
!text_color_1 = vwf_get_color_index_2bpp($01, VWF_ColorID.Text)
!text_color_2 = vwf_get_color_index_2bpp($02, VWF_ColorID.Text)
!text_color_3 = vwf_get_color_index_2bpp($03, VWF_ColorID.Text)
!text_color_4 = vwf_get_color_index_2bpp($04, VWF_ColorID.Text)
!text_color_5 = vwf_get_color_index_2bpp($05, VWF_ColorID.Text)
!text_color_6 = vwf_get_color_index_2bpp($06, VWF_ColorID.Text)
!text_color_7 = vwf_get_color_index_2bpp($07, VWF_ColorID.Text)

!outline_color_0 = vwf_get_color_index_2bpp($00, VWF_ColorID.Outline)
!outline_color_1 = vwf_get_color_index_2bpp($01, VWF_ColorID.Outline)
!outline_color_2 = vwf_get_color_index_2bpp($02, VWF_ColorID.Outline)
!outline_color_3 = vwf_get_color_index_2bpp($03, VWF_ColorID.Outline)
!outline_color_4 = vwf_get_color_index_2bpp($04, VWF_ColorID.Outline)
!outline_color_5 = vwf_get_color_index_2bpp($05, VWF_ColorID.Outline)
!outline_color_6 = vwf_get_color_index_2bpp($06, VWF_ColorID.Outline)
!outline_color_7 = vwf_get_color_index_2bpp($07, VWF_ColorID.Outline)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>palette_index: number:</code> The index of the palette for which to retrieve a color index. (min: <code>$00</code>, max: <code>$07</code>)</li>								
								<li><code>type: VWF_ColorID:</code> The type of color to retrieve the index for. Valid values:
								<table class="parameter-list">
									<tr><th>Value</th><th>Description</th></tr>
									<tr><td><code>VWF_ColorID.Text</code></td><td>Text color.</td></tr>
									<tr><td><code>VWF_ColorID.Outline</code></td><td>Outline color.</td></tr>
								</table>								
								</li>
							</ul></td>
						</tr>
					</table>
					Takes a desired palette index and a desired color type and returns the correct color index for them. The resulting value can be passed directly to commands like <a href="#text-commands-vwf_change_colors"><code>%vwf_change_colors()</code></a>. The <code>palette_index</code> parameters of this function matches the <code>palette_index</code> parameter of <a href="#text-commands-vwf_set_text_palette"><code>%vwf_set_text_palette()</code></a>.
				</p></dd>
			</dl>
				
			<h4 id="helper-functions-text-commands" class="text-center">Text Commands</h4>
			<dl>
				<dt id="helper-functions-vwf_wrap"><code>%vwf_wrap()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_wrap(commands...)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>commands...: text-command:</code> The list of text commands to wrap.</li>
							</ul></td>
						</tr>
					</table>
					Wraps an arbitrary number of text commands so that they can be passed to a macro as a single argument. This can be useful, for example, to pass multiple commands as a single option to <a href="#text-commands-vwf_display_options"><code>%vwf_display_options()</code></a>. Usage example:
					<pre><code>!edit_pal(!text_color_5, rgb_15(6, 31, 6), rgb_15(0, 0, 0))
					
!options(SampleOptions,
	%vwf_wrap( !set_pal($05), !char($00AC), !reset_color, !str(" Bullet Point 1") ),
	%vwf_wrap( !set_pal($05), !char($00AC), !reset_color, !str(" Bullet Point 2") ),
	%vwf_wrap( !set_pal($05), !char($00AC), !reset_color, !str(" Bullet Point 3") ),
	%vwf_wrap( !set_pal($05), !char($00AC), !reset_color, !str(" Bullet Point 4") )
)</code></pre>
				</p></dd>
			</dl>
			
			<h4 id="helper-functions-advanced" class="text-center">Advanced</h4>	
			<dl>
				<dt id="helper-functions-vwf_inline"><code>%vwf_inline()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_inline(commands...)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>commands...: text-command:</code> The list of text commands to compile.</li>
							</ul></td>
						</tr>
					</table>
					Lets you compile text commands outside of messages. Normally, all text command macros throw an error when used outside of a <code>%vwf_message_start()</code>/<code>%vwf_message_end()</code> pair. However, when writing custom code for VWF Dialogues, there can be valid reasons for why you'd need to use commands outside of messages (for example: to create <a href="#buffered-text-macros">Buffered Text Macros</a>). Wrapping commands into a <code>%vwf_inline()</code> call allows you to do so, by disabling the respective errors.
				</p></dd>
				
				<dt id="helper-functions-remap_ram"><code>remap_ram()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>remap_ram(address)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>address: number:</code> The RAM address to remap.</li>
							</ul></td>
						</tr>
					</table>
					Automatically remaps a RAM address as needed when applying the patch to an SA-1 ROM (and in theory, also a SuperFX ROM). This can be used to create messages that work consistently in both regular ROMs and SA-1 ROMs. In regular ROMs, the function will effectively "do nothing". In SA-1 ROMs, it will automatically remap the RAM address to the correct SA-1 equivalent. Usage example:
					<pre><code>; This will turn into $7E0DBF in a regular ROM, but into $003DBF in an SA-1 ROM.
!str("Mario's current coins: ") : !dec(remap_ram($7E0DBF), AddressSize.8Bit, true) : !new_line</code></pre>
				</p></dd>
			</dl>

			<h3 id="text-macros" class="text-center">Text Macros</h3>
			<p>
				Text macros are a system for reusing text pieces (like names or commonly used phrases) in multiple places. This has a couple of advantages:
				<ul>
					<li>Saving space: Each text macro call consists of only three bytes, so the longer the phrases you're reusing, the more space you save on message data.</li>
					<li>Consistency: Reusing text pieces (rather than copy-pasting) makes it easier to keep them consistent and not introduce typos in just a single place. Especially practical for character names. If you ever need to change the name of a character, or you want to format it differently, you only need to edit a single text macro.</li>
				</ul>
				All text macros need to be registered once (outside of a message) and can then be called via the different <a href="#text-commands-text-macros">Text Macro text commands</a>.
			</p>
			
			<h4 id="regular-text-macros" class="text-center">Regular Text Macros</h4>
			<p>
				Regular text macros are the simplest form of text macros. They simply wrap an arbitrary number of text commands into a single call. Use the <code>%vwf_register_text_macro()</code> macro to define a regular text macro.
				
				<dt id="text-macro-function-vwf_register_text_macro"><code>%vwf_register_text_macro()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_register_text_macro(unique_macro_name, commands...)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>unique_macro_name: name:</code> The name that identifies this text macro. Must be globally unique. May only contain the following characters:<br/><code>abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ _ 0123456789</code></li>
								<li><code>commands...: vwf-text:</code> One or more text commands to wrap in this macro.</li>
							</ul></td>
						</tr>
					</table>
					Registers a regular text macro. Pass the same <code>unique_macro_name</code> to <a href="#text-commands-vwf_execute_text_macro"><code>%vwf_execute_text_macro()</code></a> to execute this macro in messages.
				</p></dd>
				
				Here's a simple example to demonstrate the usage of text macros:
				<pre><code>%vwf_register_text_macro("Mario", !str("Mario") )
%vwf_register_text_macro("Luigi", !str("Luigi") )

%vwf_message_start(0050)	; Message 104-1

	%vwf_header()
	
	!str("My name is ") : !macro("Mario") : !str(" ") : !macro("Mario")
	!str(", and this here is my brother ") : !macro("Luigi") : !str(" ") : !macro("Mario") : !str("!")
	!press_a
	
%vwf_message_end()</code></pre>

				Text macros can also be nested. In other words, you can register text macros that call other, previously registered text macros, which makes them really flexible and powerful.
			</p>
			
			<h4 id="text-macro-groups" class="text-center">Text Macro Groups</h4>
			<p>
				Text macro groups are a mechanism for assigning previously registered text macros to groups that can then be indexed via RAM addresses. Put another way: Text macro groups provide a means of turning the value of a RAM address into a text string representing that value. There's many potential use cases for this. A very intuitive one would be some kind of inventory system. Imagine your game featured an inventory where the player could collect different items. In RAM, the items would probably be stored as some kind of table, with one byte specifying the type of each item. You could then use text macro groups to turn the value of said byte into the name of that item. To register a text macro group, use the <code>%vwf_start_text_macro_group()</code> and <code>%vwf_end_text_macro_group()</code> macros and insert one or more calls to <code>%vwf_add_text_macro_to_group()</code> inbetween them.
				
				<dt id="text-macro-group-function-vwf_start_text_macro_group"><code>%vwf_start_text_macro_group()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_start_text_macro_group(unique_group_name)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>unique_group_name: name:</code> The name that identifies this text macro. Must be globally unique. May only contain the following characters:<br/><code>abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ _ 0123456789</code></li>
							</ul></td>
						</tr>
					</table>
					Starts a new text macro group. Use the <a href="#text-macro-group-function-vwf_add_text_macro_to_group"><code>%vwf_add_text_macro_to_group()</code></a> macro to add text macros to this group. Pass the <code>unique_group_name</code> specified here to <a href="#text-commands-vwf_execute_text_macro_by_indexed_group"><code>%vwf_execute_text_macro_by_indexed_group()</code></a> to index this group in messages.
				</p></dd>
				
				<dt id="text-macro-group-function-vwf_add_text_macro_to_group"><code>%vwf_add_text_macro_to_group()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_add_text_macro_to_group(macro_name)</code></pre></td>
						</tr>
						<tr>
							<th>Parameters</th>
							<td><ul class="parameter-list">
								<li><code>macro_name: name:</code> The name of the text macro to add to the current text macro group. Must have been previously registered via <a href="#text-macro-function-vwf_register_text_macro"><code>%vwf_register_text_macro()</code></a> and match the <code>unique_macro_name</code> parameter passed to it.</li>
							</ul></td>
						</tr>
					</table>
					Adds a new text macro to the current text macro group. Its index within the group depends on the order of <code>%vwf_add_text_macro_to_group()</code> calls. The first call will be index <code>0</code>, the second call index <code>1</code> and so on.
				</p></dd>
				
				<dt id="text-macro-group-function-vwf_end_text_macro_group"><code>%vwf_end_text_macro_group()</code></dt>
				<dd><p>
					<table class="api-documentation">
						<tr>
							<th>Usage</th>
							<td><pre><code>%vwf_end_text_macro_group()</code></pre></td>
						</tr>
					</table>
					Ends the current text macro group.
				</p></dd>
			
				Here's an advanced example, combining different text macro functionality (regular text macros, text macro groups, nested text macros) in a practical way to create some super handy text macros:
<pre><code>; Registers text macros for Mario's and Luigi's names
%vwf_register_text_macro("MarioName", !str("Mario") )
%vwf_register_text_macro("LuigiName", !str("Luigi") )

; Registers text macros for the different power-up states of Mario and Luigi
%vwf_register_text_macro("SmallPowerup", !str("Small") )
%vwf_register_text_macro("SuperPowerup", !str("Super") )
%vwf_register_text_macro("CapePowerup", !str("Cape") )
%vwf_register_text_macro("FirePowerup", !str("Fire") )

; Adds Mario's and Luigi's names to a new "PlayerName" group.
%vwf_start_text_macro_group("PlayerName")
	%vwf_add_text_macro_to_group("MarioName")
	%vwf_add_text_macro_to_group("LuigiName")
%vwf_end_text_macro_group()

; Adds the different powerup states to a new "PlayerPowerup" group.
%vwf_start_text_macro_group("PlayerPowerup")
	%vwf_add_text_macro_to_group("SmallPowerup")
	%vwf_add_text_macro_to_group("SuperPowerup")
	%vwf_add_text_macro_to_group("CapePowerup")
	%vwf_add_text_macro_to_group("FirePowerup")
%vwf_end_text_macro_group()

; Registers a convenience macro for indexing the "PlayerName" group.
; $7E0DB3 contains the current player ID.
; 0: Mario
; 1: Luigi
; See SMW Central RAM map for details.
%vwf_register_text_macro("CurrentPlayer", !macro_group("PlayerName", remap_ram($7E0DB3)))

; Registers a convenience macro for indexing both the "PlayerName" and the "PlayerPowerup" groups.
; $7E0019 contains the power-up state of the current player.
; 0: None
; 1: Mushroom
; 2: Cape
; 3: Fire Flower
; See SMW Central RAM map for details.
%vwf_register_text_macro("CurrentPlayerWithPowerup", !macro_group("PlayerPowerup", remap_ram($7E0019)), !nbsp, !macro("CurrentPlayer"))


%vwf_message_start(0050)	; Message 104-1

	%vwf_header()
	
	; Let's assume you're currently playing as Luigi and have a Cape power-up. Then this message will read:
	; "Hey, aren't you Luigi? Cape Luigi, to be specific."
	!str("Hey, aren't you ") : !macro("CurrentPlayer") : !str("? ") : !macro("CurrentPlayerWithPowerup") : !str(", to be specific.")
	!press_a
	
%vwf_message_end()</code></pre>
			</p>
			
			<h4 id="buffered-text-macros" class="text-center">Buffered Text Macros</h4>
			<p>
				Buffered text macros function similarly to regular text macros, with the main difference being that they are constructed at runtime and not patched into the ROM. This makes it possible to have dynamic text macros in the game. A classical example for this would be a player name generated from a name entry screen. The name could be stored in a buffered text macro and then displayed via the <a href="#text-commands-vwf_execute_buffered_text_macro"><code>%vwf_execute_buffered_text_macro()</code></a> text command.
			</p>
			
			<p>
				Consider this an advanced feature, as it requires some coding knowledge to make meaningful use of. To register buffered text macros, call the shared routines <code>VWF_ResetBufferedTextMacros</code>, <code>VWF_BeginBufferedTextMacro</code>, <code>VWF_AddToBufferedTextMacro</code> and <code>VWF_EndBufferedTextMacro</code> (their usage is documented in code right next to them, so I'll skip a detailed documentation here).
			</p>
			
			<p>
				See <a href="#shared-routines">Shared Routines</a> for details.
			</p>
			
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="advanced-functionality" class="text-center">4. Advanced Functionality</h2>
			<p>
				This section is intended for advanced users only. That is, people who want to write custom resources (sprites, blocks, patches etc.) that make use of the patch or who want to use the patch in some complex ways. In other words: If you aren't a coder, you can most likely just ignore this entire section.
			</p>

			<h3 id="display-messages" class="text-center">Display Messages From Custom Code</h3>
			<p>
				While the VWF Dialogues Patch provides a pretty powerful text system for your hack, the only built-in method of actually opening text boxes is via the message box hijack. However, not everyone wants to override SMW's default message boxes with VWF text boxes, and some people may want to display VWF text boxes from other places, like interactive NPCs or story events. In other words: There's a number of good reasons for wanting to open VWF text boxes from your custom code, and luckily, the patch makes this very easy to do.
			</p>
			
			<p>
				If you're just an end user, you don't need to bother with any of that. I recommend searching SMW Central instead for resources that already offer support for the VWF Dialogues Patch. A popular example would be <a href="https://www.smwcentral.net/?p=section&amp;a=details&amp;id=29212">WYE's NPCs sprites</a>. This section is only relevant to you if you're making your own resources and want to open VWF text boxes from them.
			</p>
			
			<p>
				As already mentioned, doing so is thankfully very simple and only requires you to call the <code>VWF_DisplayAMessage</code> shared routine from your own code. See section <a href="#shared-routines">Shared Routines</a> on details for how to use shared routines. Usage of the routine is documented in code right next to it, but calling it is usually as simple as:
				
				<pre><code>lda.b #MessageNumber
ldx.b #MessageNumber>>8
jsl VWF_DisplayAMessage</code></pre>
			
				So now to actually use my patch and display some text on the screen.
				Remember this window from applying the patch to your ROM?
				<img class="d-block m-1 my-2" src="screenshots/console-1.png" alt="Screenshot" width="979" height="512" />
				This is the first time it actually plays a role. Now if youâre not familiar with ASM at all or donât
				plan on using this patch in your own patches, custom sprites or custom blocks then this wonât be
				very interesting for you. For everyone else here is the general procedure of how to start a dialogue
				ingame using this patch:
				<ol>
					<li>
						Write the number of the message to display to the Message register. This is a 2-Byte address.
						So letâs say youâd want to display message <code>$002D</code>.
						Using the example from the screenshot this would go somewhat like this:
						<pre><code>rep #$20		; Set A to be 16-bit.
lda.w #$002D		;\ Message number to load.
sta.l $702001		;/
sep #$20		; Set A to be 8-bit.</code></pre>
					</li>
					<li>
						Write <code>$01</code> to the VWF State register. One thing is very important here: Before you do this
						youâll have to check if a dialogue is already being processed. Why? Well, if you donât this might
						lead to unexpected results, like Layer 3 glitiching up for example. If the VWF State register equals
						<code>$00</code> then no dialogue is being processed. This leads to the following code:
						<pre><code>lda.l $702000		;\ Is a VWF Message being displayed?
bne .SkipDialogue	;/ If so, branch.
lda #$01		;\ Otherwise, initialize the new VWF Message.
sta.l $702000		;/
.SkipDialogue</code></pre>
					</li>
				</ol>
				<ul>
					<li>
						Alternatively, the patch contains a routine that will do most of the above for you in addition to forcing
						the previous message to close. All you need to do is load the message number. To call this routine, do the
						following, using the above screenshot and previous example as an example.
						<pre><code>rep #$20		; Set A to be 16-bit.
lda.w #$002D		; Message number to load.
jsl.l $90F079		; Address of the "DisplayAMessage" routine.
sep #$20		; Set A to be 8-bit.</code></pre>
					</li>
				</ul>
			</p>

			<p>
				Whenever a dialogue is currently active, the Status Bar and the levelâs Layer 3 are hidden. Theyâll
				return at the end of the dialogue. I still recommend not using dialogues in Layer 3 levels.
				Alright. Letâs move on. By now youâre probably wondering what that number we have written to the
				Message register corresponds to. Well, open the file <code>vwfmessagepointers.asm</code> and find out.
				Youâll see something like this:
				<pre><code><table class="border-0" style="line-height:19px;"><tbody><tr><td>dl Message0000,	</td><td>Message0001,	</td><td>Message0002,	</td><td>Message0003</td></tr>
<tr><td>dl Message0004,	</td><td>Message0005,	</td><td>Message0006,	</td><td>Message0007</td></tr>
<tr><td>dl Message0008,	</td><td>Message0009,	</td><td>Message000A,	</td><td>Message000B</td></tr>
<tr><td>dl Message000C,	</td><td>Message000D,	</td><td>Message000E,	</td><td>Message000F</td></tr>
<tr><td>dl Message0010,	</td><td>Message0011,	</td><td>Message0012,	</td><td>Message0013</td></tr>
</tbody></table>[...]</code></pre>
				This is the table that points to the text for each dialogue. By now you should know how tables work:
				A "dl" at the beginning, a space after that and a bunch of labels seperated by commas. In this case the
				table works like this: If the Message register is $0000, use the first address in this table. If the
				Message register is $0001, use the second address in this table. Etc.
			</p>

			<p>
				As you can see Iâve always used the required value of the Message register as the name of the according
				label. This is not required, but itâs recommended for orientation. Basically you can put any
				24-Bit-Address here, even RAM addresses, which can be useful if youâre using this in your own patches. Letâs
				have a table with a few valid examples:
				<pre><code><table class="border-0" style="line-height:19px;"><tbody><tr><td>dl Message0000,	</td><td>$7F0000,	</td><td>Message0002,	</td><td>Message0003</td></tr>
<tr><td>dl $05A5D9,	</td><td>Message0005,	</td><td>Message0006,	</td><td>Randomname1</td></tr>
<tr><td>dl Message0008,	</td><td>Message0009,	</td><td>Message000A,	</td><td>Randomname2</td></tr>
<tr><td>dl $268000,	</td><td>Message000D,	</td><td>Message000E,	</td><td>Message000F</td></tr>
<tr><td>dl MessageABCD,	</td><td>Message0011,	</td><td>Message0012,	</td><td>Message0000</td></tr></tbody></table>[...]</code></pre>
				By default there are labels for 256 messages in this table. In theory you can use up to 10922 different
				messages with this patch, but since SNES ROMs are rather limited in file space itâs unlikely youâll ever get
				to use that many, especially since my patch doesnât compress text in any way. Itâs not very likely that youâll
				ever get to have that many messages in your game, anyways. If 256 messages arenât enough for you, simply add
				more labels at the end of this file. Itâs as simple as that. By now you might be wondering "OK OK, but where
				the hell do I put the text now?". Letâs head to the next point and clear this question.
			</p>

			<p>
				Open <code>vwfmessages.asm</code>. As you can see labels for each label in the table are already in here.
				Most of them are ununsed and can be used by yourself. If you chose to replace SMWâs original messages
				by this patch in section 2 then the comments at the end of each label also tell you which original
				message the according labels are replacing. <code>Message0009:</code> replaces SMWâs original message 004-2 for
				example. To edit a dialogue simply put text under the according label. To add new ones simply paste
				them at the end of the file, but ABOVE <code>%textend()</code>. This is important to prevent glitches.
				After weâre done with this we can finally get to actually write messages. YAY!
			</p>
			
			<h3 id="message-asm" class="text-center">MessageASM</h3>

			<p>
				Starting with V1.3, this patch enables you to run custom code on a per message basis, like how UberASM allows you to have
				custom code run on a per level/submap/gamemode/etc. basis. MessageASM code is run every frame once the current VWF mode is
				02 or more and can be used to do things that the <code>$F1</code> command cannot do. It also allows you to tie message
				specific code to this patch instead of through UberASM code or some other outside resource. MessageASM can be used to do things
				like create custom menus, display character portraits, auto-display the name of whoever is speaking at the start of each text box,
				run scripts that move/animate sprites, etc.

			</p><p>
				<h6>Some useful VWF RAM addresses to use with your MessageASM code:</h6>

				</p><p>
				<code>!skipmessageflag</code> = Is set to 00 when a message has been skipped with the Start button. Is a non-zero value otherwise.

				</p><p>
				<code>!initialskipmessageflag</code> = Is non-zero if the current message is allowed to be skipped.

				</p><p>
				<code>!l3priorityflag</code> = Contains a backup of the layer 3 priority bit before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!l3transparencyflag</code> = Contains a backup of the layer 3 color math settings before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!l3mainscreenflag</code> = Contains a backup of the layer 3 mainscreen setting before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!l3subscreenflag</code> = Contains a backup of the layer 3 subscreen setting before the text box was displayed. Modify this to affect layer 3 once the text box disappears.

				</p><p>
				<code>!isnotatstartoftext</code> = Is set to 00 when a text box is cleared, 01 when text parsing begins. Use this to initialize code related to individual text boxes.
			</p>

			<h3 id="shared-routines" class="text-center">Shared Routines</h3>

			<p>
				This file, added in V1.3, is meant to contain custom code related to VWF messages such as MessageASM code. By
				default, this file contains various routines that give your messages extra functionality. Here is what these
				routines do:
			</p>
				<dt id="vwfcode-displayamessage"><code>DisplayAMessage</code></dt>
				<p>
					This will cause a new VWF message to display based on whatever 16-bit value was stored in A prior to calling. If
					a VWF message is already active, then the previous message will be forced to close to prevent glitches. This routine
					is meant to be called from within any custom code, whether that be MessageASM, the <code>$F1</code> command code,
					UberASM code or a custom sprite/patch/block/etc.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>REP #$20
LDA.w #MessageNumber
JSL DisplayAMessage</code></pre>
				</p>
				<dt id="vwfcode-changevwftextptr"><code>ChangeVWFTextPtr</code></dt>
				<p>
					This lets you change the VWF text pointer to change the text that will be displayed next frame. Call this routine from
					within MessageASM or <code>$F1</code> command code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>LDA.b #TextPointer
LDX.b #TextPointer>>8
LDY.b #TextPointer>>16
JML ChangeVWFTextPtr</code></pre>

					... where "TextPointer" is any label above valid text data.
				</p>

				<dt id="vwfcode-changemessageasmptr"><code>ChangeMessageASMPtr</code></dt>
				<p>
					This lets you change the MessageASM pointer to change what code will run next frame. Call this routine from
					within MessageASM or <code>$F1</code> command code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>LDA.b #ASMPointer
LDX.b #ASMPointer>>8
LDY.b #ASMPointer>>16
JML ChangeMessageASMPtr</code></pre>

					... where "ASMPointer" is any label above valid code.
				</p>

				<dt id="vwfcode-changemessageskipptr"><code>ChangeMessageSkipPtr</code></dt>
				<p>
					This lets you change the Message skip pointer to change where the text box should jump when start is pressed. Call this routine from
					within MessageASM or <code>$F1</code> command code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>LDA.b #TextPointer
LDX.b #TextPointer>>8
LDY.b #TextPointer>>16
JML ChangeMessageSkipPtr</code></pre>

					... where "TextPointer" is any label above valid text data.
				</p>

				<dt id="vwfcode-checkifmessagewasskipped"><code>CheckIfMessageWasSkipped</code></dt>
				<p>
					This allows you to detect if the player has pressed start to skip a message. This can allow you to reset <code>!skipmessageflag</code>
					to a non-zero value if you want a message to have multiple skip functions in the same message. Note that this check only works if a message
					was initially set to allow message skipping. If you want to toggle whether this routine works or not, store 00 to <code>!initialskipmessageflag</code>
					to disable and any non-zero value to enable. Call this routine from within MessageASM code.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>JSL CheckIfMessageWasSkipped
BCS .MessageWasSkipped
.MessageWasNotSkipped</code></pre>

					... where "TextPointer" is any label above valid text data.
				</p>

				<dt id="vwfcode-buffervwftext"><code>BufferVWFText</code></dt>
				<p>
					This routine allows you to buffer a string of text/commands to RAM, allowing for easier and more flexible variable text display.
					Buffered strings must end with a <code>$E7</code> command to signify the end of a string. Buffered text can be displayed using text macros
					0000-000F or by setting <code>$03</code> to a non-zero value before calling this routine to hijack the current text pointer. If you do
					the latter, the buffered text will get a <code>$FB</code> command automatically added to the end of it, so that the text pointer will
					know where to jump back to. You should only call this routine from within MessageASM code, and only when at the start of an empty text box.
					Otherwise, you run the risk of issues with word wrapping and/or centered text. In addition, if you call this routine consecuatively, be sure
					to call <code>BufferVWFText_Main</code> first, then call <code>BufferVWFText_Entry2</code> for each subsequent call.
				</p><p>
					<h6>Entry code 1:</h6>
					<pre><code>;(Some code that sets X to a multiple of 2)
REP #$30
STZ $03
LDY.w #.StringTable>>16
LDA.l .StringTable,x
JML BufferVWFText_Main</code>

<h6>Entry code 2:</h6>
<code>;(Some code that sets X to a multiple of 2)
REP #$30
SEC
ROL $03
LDA.w #TextPointer
STA $04
LDA.w #TextPointer>>8
STA $05
LDY.w #.StringTable>>16
LDA.l .StringTable,x
JML BufferVWFText_Main

.StringTable
dw .String1,.String2,.String3 ...

.String1
db "Insert any valid text/commands here",$E7</code></pre>

					... where "TextPointer" is any label above valid text data.

				</p><p>
					Warning: If used in MessageASM code, be careful with when you call this routine and hijack the text pointer. If text parsing is delayed
					in some way and you call this routine multiple times, then your message could end up in an infinite loop!
				</p>

				<dt id="vwfcode-togglemessageasmptr"><code>ToggleMessageASMPtr</code></dt>
				<p>
					This allows you to toggle whether the current MessageASM routine should run. Call this routine within MessageASM code,
					<code>$F1</code> command code or directly with the <code>$F1</code> command.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>JSL ToggleMessageASMPtr_XXXX</code></pre>

					... where "XXXX" is either "Enable" or "Disable".
				</p>

				<dt id="vwfcode-closemessageandgotooverworld"><code>CloseMessageAndGoToOverworld</code></dt>
				<p>
					This allows you to make the current message close and fade out to the overworld. Call this routine within MessageASM code,
					<code>$F1</code> command code or directly with the <code>$F1</code> command.
				</p><p>
					<h6>Entry code:</h6>
					<pre><code>JSL CloseMessageAndGoToOverworld_XXXX</code></pre>

					... where "XXXX" is either "NormalExit" or "SecretExit" or "StartPlusSelect" depending on what exit level behavior you want.
				</p><p>
					Note: If using Lunar Magic 3.00, then you can simply use the $EF command to teleport to the overworld via a secondary entrance.
				</p>

			<h3 class="text-center">Custom Patches</h3>

			<p>
				Everything left now is to explain how to use the functions of this patch in your own patches.
				For this we need the screenshot from Asar once again.
				<img class="d-block m-1 my-2" src="screenshots/console-1.png" alt="Screenshot" width="979" height="512" />
			</p>

			<dl>
				<dt>VWF Creation Routine</dt>
				<dd><p>
					This routine creates VWF text graphics in RAM when JSLed to. You use SMWâs Scratch RAM to
					set it up.
					<table class="kv-map"><tbody>
						<tr><th><code>$00</code>-<code>$02</code></th><td>Text source address.</td></tr>
						<tr><th><code>$03</code>-<code>$05</code></th><td>Font graphics address (2BPP GB format).</td></tr>
						<tr><th><code>$06</code>-<code>$08</code></th><td>Font width table address.</td></tr>
						<tr><th><code>$09</code>-<code>$0B</code></th><td>Destination address.</td></tr>
						<tr><th><code>$0C</code>-<code>$0D</code></th><td>Number of characters.</td></tr>
						<tr><th><code>$0E</code></th><td>Pixel to start on.</td></tr>
						<tr><th><code>$0F</code></th><td>Set to $01 if the destination address doesnât contain VWF text graphics yet.</td></tr>
					</tbody></table>
					Note that the special characters explained before are not actually used by this routine.
				</p></dd>
				<dt>Pattern Addition Routine</dt>
				<dd><p>
					This routine adds a background pattern to VWF text previously created in RAM when
					JSLed to. This assumes that the text only uses the third and fourth colors of the palette
					and that the background pattern graphic only uses the second color. Otherwise the result
					may not turn out as expected. You use SMWâs Scratch RAM to set it up.
					<table class="kv-map"><tbody>
						<tr><th><code>$00</code>-<code>$02</code></th><td>Pattern graphic source address (2BPP GB format).</td></tr>
						<tr><th><code>$03</code>-<code>$05</code></th><td>VWF text graphics address = destination address (2BPP GB format).</td></tr>
						<tr><th><code>$06</code></th><td>Number of tiles.</td></tr>
					</tbody></table>
				</p></dd>
				<dt>BG GFX register</dt>
				<dd><p>
					Which graphic to use for the background pattern of the text box.
				</p></dd>
				<dt>BG Color register</dt>
				<dd><p>
					Which color to use for the background of the text box in SNES RGB. This is a 2-Byte address.
				</p></dd>
				<dt>Frame GFX register</dt>
				<dd><p>
					Which set of graphics to use for the text box frame.
				</p></dd>
				<dt>Abort Dialogue Processing register</dt>
				<dd><p>
					Flag used to force the VWF message to close.
				</p></dd>
				<dt>DisplayAMessage routine</dt>
				<dd><p>
					This routine allows you to display a new VWF Message and force the current message to close
					if one is already displaying. Before JSLing to this routine, use <code>REP #$20</code> to set A
					to be 16-bit, then load the 16-bit message number you want into A.
				</p></dd>
			</dl>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="problem-solving" class="text-center">5. Problem Solving</h2>
			
			<p>
				TODO: Note on Asar full stack option.
			</p>
			
			<p>
				In this section Iâll go over a few problems that may or may not be more complicated than most of the
				other stuff here so far.
			</p>
			
			<h4 class="text-center">Migration</h4>
			<p>
				When I originally started refactoring this patch to make use of Asar 1.90 variadic macros, backwards-compatibility
				with older patch versions was still one of my main goals. I wanted to make it easy for all version 1.2 (or earlier) users of the patch
				to migrate to version 1.3. Over time, as I kept adding more and more improvements to 1.3, this goal kept moving further and further out of reach.
			</p>
			
			<p>
				Technically speaking, version 1.3 is binary-compatible with messages from version 1.2, but it just includes so many changes to its general format
				that writing a straight-forward migration guide became too complex of a task for me. Therefore, I made the decision to declare version 1.3
				as incompatible with version 1.2.
			</p>
			
			<p>
				So what does this mean for you? Well, if you're making a new hack from scratch or working on a hack that has never used VWF Dialogues before, it doesn't really matter.
				Just use the newest version of the patch that's available. However, if you're working on a hack that's already using an older version of VWF Dialogues, you now basically have
				two options. Either you stick with the old patch version (and whatever bugs it might have), or you manually port over everything from the old to the new version, which basically
				involves recreating all your message boxes and resources in the format of the new version.
			</p>
			
			<p>
				As I said, there's unfortunately no easy way of migrating to newer patch versions. However, on the positive side, version 1.3 of the patch was designed in a way that makes it a lot easier
				to extend in the future without breaking compatibility, so once you go through the effort of migrating, you'll hopefully never have to do it again to that degree for newer versions.
			</p>

			<h4 class="text-center">Dialogues Without Freezing Sprites</h4>
			<p>
				So youâre planning to use a dialogue in your game without freezing sprites? Dialogues like that can
				be found in various RPGs as system messages. First of all there are certain things you have to note
				when using this option:
			</p>
			<ul>
				<li>
					Currently the patch doesnât contain any hijack to end a dialogue when touching a goal tape.
				</li>
			</ul>
			<p>
				Well, if you plan to use this feature anyways you may notice that it can be pretty slow in certain
				situations, so here are a few tips to help you speed it up:
			</p>
			<ul>
				<li>
					Use the SA-1 Enhancement Chip.
					<a tabindex="0" role="button" data-toggle="collapse" data-target="#video-sa1" aria-expanded="false" aria-controls="video-sa1">Case in point.</a>
					<div id="video-sa1" class="collapse mt-3">
						<iframe class="video" style="height:640px;" src="https://www.youtube.com/embed/hGmuaMoVO9I?rel=0&amp;start=71" allow="autoplay; encrypted-media" allowfullscreen="true"></iframe>
					</div>
				</li>
				<li>
					If you canât use the SA-1 chip for whatever reason, then the following should provide a useable alternative:
					<ul>
						<li>
							Use the newest version of Lunar Magic and activate the FastROM patch and FastROM addressing. This
							speeds up the game by a whole lot. Enough to make use of this feature reasonable.
						</li>
						<li>
							Use slower text speeds. The slower the text speed, the more frames between each letter. The
							more frames between each letter, the less the player will notice any slowdown.
						</li>
						<li>
							Show only small parts of text at the same time. In Secret of Mana for example system messages
							always consisted of only one line of text. If you do it like that and put waits at the end of
							each line, then the "lag phases" will be a lot shorter and wonât be noticed that much.
						</li>
						<li>
							Avoid putting lots of sprites on the screen, especially big ones. Pretty much all of the slow downs
							are caused by sprites. Two or three small sprites on a screen should be fine, but any
							additional sprite will most likely slow it down.
						</li>
						<li>
							Use Text Box Creation Style 0 (=No Text Box). This will skip the Pattern Addition Routine and
							therefore save a good amount of cycles.
						</li>
					</ul>
				</li>
			</ul>

			<h4 class="text-center">Bank Limits</h4>
			<p>
				If you make your message list long enough (around 200 messages), it is possible that youâll get an
				error like this:
				<img class="d-block m-1 my-2" src="screenshots/console-2.png" alt="Screenshot" width="979" height="512" />
				As Asar states, this is caused by crossing a bank border. More specifically, your message data has gotten too
				long to fit inside a single bank. There is a simple solution to this problem: Just add <code>%nextbank(freedata)</code> above the last message in the file,
				and the errors should disappear (until you add around two hundred more messages). If they donât, keep moving the
				<code>%nextbank(freedata)</code> up (always make sure itâs just above a message) until they do.
			</p>

			<p>
				Another important thing to note: Itâs impossible to split the pointer table file
				"vwfmessagepointers.asm" into multiple banks. Originally, I wanted to add bank border checking to this file,
				but I figured that even without bank border checking, you can still get up to
				$2AAA (thatâs 10922) pointers into a single bank, and letâs be serious here: Itâs rather unlikely for a single SNES game
				to ever contain this many messages. Therefore this one limitation shouldnât really matter.
			</p>
			<p>
				Alternatively, you can attempt to optimize your text so that it takes up less space. Comment out messages you're not using
				anymore. Rephrase your text to say the same thing in fewer characters. Convert key terms, names, frequently used phrases, etc.
				into text macros. Optimize your MessageASM/<code>$F1</code> command code. Do whatever you can to make your text as small as possible
				without compromising any functionality.
			</p>

			<h4 class="text-center">Conflicts With HDMA Effects</h4>
			<p>
				This patch makes use of DMA transfers. DMA transfers share their channels with HDMA. This means
				they will influence any HDMA effects that use the same channels. The DMA transfers in this patch all
				use channel 0 (%00000001). If you experience problems with an HDMA effect while displaying a
				dialogue box, just make sure not to use channel 0 for that effect. Read an HDMA tutorial for
				further information on this subject.
			</p>

			<h4 id="advanced-compatibility" class="text-center">Compatibility With Other Patches</h4>
			<p>
				The following patches are known to be compatible:
				<ul class="font-weight-bold">
					<li>All patches made by RPG Hacker</li>
					<li>Kaijyuuâs Super Status Bar</li>
				</ul>
				The following patches have a few compatibility quirks which can be easily worked around:
				<ul>
					<li class="font-weight-bold">Sprite Status Bar</li>
					<dd>
						The sprite status bar doesnât disappear when a message box is opened,
						but you probaably shouldnât be using both the Sprite Status Bar and
						the Layer 3 dialogue box in the same level anyway, since
						the Sprite Status Barâs purpose is to allow full usage of the Layer 3,
						which the dialogue box completely hides while itâs shown.
					</dd>
				</ul>
				The following patches are known to be incompatible:
				<ul>
					<li class="font-weight-bold">SMB3 Status Bar</li>
					<dd>
						Causes graphical corruption and displays garbage.
					</dd>
					<li class="font-weight-bold">Minimalist Status Bar</li>
					<dd>
						Flashes the whole screen during dialogue transitions.
					</dd>
				</ul>
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="bugs" class="text-center">6. Known Bugs</h2>
			<p>
				<ul>
					<li>This patch has been known to cause freespace leaks. The current cause is unknown.</li>
					<li>Sometimes, when closing a dialogue, thereâs a Flash of <code>0</code>s (FO0)
						when using level modes where Layer 3 isnât on the Main-Screen, or the Main-Screen
						or Sub-Screen registers are updated in such a way that Layer 3 gets shown
						by another patch while this patch is busy restoring Layer 3.
					<br/>
						While this may sound easy to fix by applying <a href="https://smwc.me/1468216">Blind
						Devilâs patch</a>, it isnât, because of the tilemap still containing the VWF Dialogues
						transparent tile, which is <code>$00</code>, because tile <code>$FC</code> can
						get overwritten by a characher tile in sufficiently long messages.</li>
				</ul>
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="plans" class="text-center">7. Planned Features</h2>
			<p>
				<small class="text-center my-2 d-block">
					LOL, I wrote this patch almost a gazillion years ago and none of this is likely
					going to happen anymore*. Sorry to disappoint you. :(<br/><br/>
					Sincerly, RPG Hacker<br/><br/>
					*At least by me. Luckily, the patch is now hosted on GitHub, and a bunch of people have already picked up right where I had left off. Thanks to them, the patch keeps evolving, even to this day!<br/>
					I'm thankful to every one of you! &lt;3
				</small>
				<ul>
					<li>Create a GUI application to make setting up the patch a lot easier for the user.</li>
					<li>Add a feature to the patch that allows the player to easily customise the text box ingame.</li>
					<li>Add a command to jump to a certain pixel inside the text box.</li>
					<li>Allow customising which button is used for advancing the dialogue.</li>
					<li>Implement a better alternative for the deprecated 16-Bit mode. Something that supports all kinds of languages, while keeping the text insertion size as small as possible for every one of them.</li>
					<li>Lots of optimizations.</li>
				</ul>
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="bug-reports" class="text-center">8. Bug Reports</h2>
			<p>
				Bugs or suggestions? Contact me on SMW Central, or (preferably) file an <a href="https://github.com/RPGHacker/SMW-Workspace/issues">issue</a> on GitHub!
			</p>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>

		<!-- Seperator Comment -->

		<section class="container">
			<h2 id="history" class="text-center">9. History</h2>

			<dl>
			<dt><h5>Version 1.3 - <span data-date="2022-01-07">01/07/2022</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>Yoshifanatic</li>
						<li>RPG Hacker</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Completely reworked message format. Messages are now constructed via macros/defines instead of magic hex values. The patch now requires Asar 1.90 or higher.</li>
						<li>Fixed an oversight where various aspects of layer 3 (transparency, priority, main/subscreen status) were not being preserved.</li>
						<li>Added MessageASM functionality to allow one to run custom code on a per-message basis.</li>
						<li>Added the ability to modify the text pointer using the start button.</li>
						<li>Added a text macro system, allowing one to define strings of text/commands to be called at any time in a message.</li>
						<li>Added an extra step to message initialization that initializes all the VWF variables on message load, not just on title screen load.</li>
						<li>Added command byte <code>$EB</code> that forces a textbox to freeze until something modifies the text pointer.</li>
						<li>Added command bytes <code>$E8</code> and <code>$E7</code> for the text macro system and that act like a JSR and RTS to the textbox system, respectively.</li>
						<li>Added several useful routines that can be called from within messages, such as a text buffering routine.</li>
						<li>Made it so that the textbox will be forced to close when the screen fades out. The fadeout will also be delayed until the textbox closes.</li>
						<li>Added some functionality that enables the textbox to close if another message is being set to display</li>
						<li>Changed the hijack location for initializing the VWF RAM on the title screen from $0086E2 to $0096B4, because the former location was very questionable.</li>
						<li>Fixed certain incompatibilities with Vitor Vilela's SA-1 Pack Patch v1.30 and up.</li>
						<li>Adjusted the <code>$EF</code> command to work with secondary entrances $0200-$1FFF, levels using Lunar Magic 3.00 custom level dimensions, and layer 2 horizontal levels.</li>
						<li>Added a RAM flag that indicates that the text box has just been cleared.</li>
						<li>Added placeholder text to messages with no content, which makes it easier for players to report them to hack creators.</li>
						<li>Cut RAM usage in half by optimizing how the text tiles are buffered.</li>
						<li>Several small code optimizations.</li>
						<li>Overall patch cleanup - made some places in the patch more readable and more intuitive, using newer Asar features.</li>
						<li>Fixed several incompatibilities - patch should no work on newest versions of Higan/BSNES, as well as on sd2snes.</li>
						<li>Changed the way the "freeze sprites" setting works. As a result, the smoke clouds in Yoshi's House can no longer glitch while a dialog box is open.</li>
						<li>When specifying &quot;wait x frames&quot; for the auto wait header setting, the patch will now wait 1 frame less, giving the setting an effective range of $01 to $FE instead of $02 to $FF.</li>
						<li>The "display message" command now has an option to play the box creation animation again (which will also reload certain text box settings).</li>
						<li>Pointer tables for messages are now generated automatically.</li>
						<li>Hex and decimal number functions no longer require 0123456789ABCDEF to be the first characters in the font, but rather use character mapping table files to determine the correct characters to use.</li>
						<li>Character mapping table now supports a bunch of special characters, as well as Japanese (both available from Asar 2.0 onwards).</li>
						<li>Added new character offset command, which allows applying an offset value to every single character being rendered. Useful for creating fonts with a custom number of characters.</li>
						<li>Fixed: When running in 16-bit mode and displaying a 16-bit decimal number, the thousands digit didn't work and displayed a random character instead.</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.2 - <span data-date="2018-05-03">05/03/2018</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>ExE Boss</li>
						<li>RPG Hacker</li>
						<li>randomdude999</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Merged changes from the SA-1 converted version.</li>
						<li>Converted to a hybrid patch.</li>
						<li>Updated code style to match the rest of RPG Hackerâs patches.</li>
						<li>Updated the Readme to look good.</li>
						<li>Fixed a few things in the Readme and updated some of the outdated information.</li>
						<li>Fixed and improved the Readme and renamed it to manual.</li>
						<li>Fixed a typo in <code>vwfmessagepointers.asm</code>.</li>
						<li>Fixed the broken option selection cursor.</li>
						<li>Fixed issue when using <code>$F4</code> to display character <code>$FF</code>.</li>
						<li>Added a RAM flag to allow closing the dialogue mid-message.</li>
						<li>The SRAM expansion patch wonât accidentally contract the SRAM size.</li>
						<li>Added a python script for generating a character width table.</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.01 - <span data-date="2014-07-06">07/06/2014</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>Vitor Vilela</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Fixed palette issues with accurate emulators</li>
						<li>Changed the channel used in DMA transfers to 0.</li>
						<li>Fixed cursor sometimes not disappearing when moving.</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.0B - <span data-date="2012-01-16">01/16/2012</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>Alcaro</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Converted to Asar format</li>
					</ul>
				</p></dd>

				<dt><h5>Version 1.0 - <span data-date="2018-11-13">11/13/2010</span></h5></dt>
				<dd><p>
					<h6>Contributors:</h6>
					<ul>
						<li>RPG Hacker</li>
					</ul>

					<h6>Changes:</h6>
					<ul>
						<li>Initial Release</li>
					</ul>
				</p></dd>
			</dl>
			<p class="text-center my-4"><a href="#index">Return to Index</a></p>
		</section>
	</body>
</html>
